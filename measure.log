nohup: ignoring input

*******************************************************************************
KeYmaera X repeatability evaluation.
*******************************************************************************

kyx
rm: cannot remove '//ismail/.keymaerax/cache/lemmadb/qecache': No such file or directory
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 1#Benchmarks/Basic/Static semantics correctness: Assignment 1 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 1#Benchmarks/Basic/Static semantics correctness: Assignment 1 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 1: tactic=Scripted proof,tacticsize=3,budget=60[s],duration=42[ms],qe=36[ms],rcf=0,steps=38
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 2#Benchmarks/Basic/Static semantics correctness: Assignment 2 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 2#Benchmarks/Basic/Static semantics correctness: Assignment 2 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 2: tactic=Scripted proof,tacticsize=5,budget=60[s],duration=85[ms],qe=48[ms],rcf=0,steps=75
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 3#Benchmarks/Basic/Static semantics correctness: Assignment 3 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 3#Benchmarks/Basic/Static semantics correctness: Assignment 3 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 3: tactic=Scripted proof,tacticsize=7,budget=60[s],duration=160[ms],qe=77[ms],rcf=0,steps=154
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 4#Benchmarks/Basic/Static semantics correctness: Assignment 4 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 4#Benchmarks/Basic/Static semantics correctness: Assignment 4 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 4: tactic=Scripted proof,tacticsize=3,budget=60[s],duration=686[ms],qe=210[ms],rcf=0,steps=284
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 5#Benchmarks/Basic/Static semantics correctness: Assignment 5 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 5#Benchmarks/Basic/Static semantics correctness: Assignment 5 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 5: tactic=Scripted proof,tacticsize=7,budget=60[s],duration=22[ms],qe=0[ms],rcf=0,steps=28
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 6#Benchmarks/Basic/Static semantics correctness: Assignment 6 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 6#Benchmarks/Basic/Static semantics correctness: Assignment 6 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 6: tactic=Scripted proof,tacticsize=19,budget=60[s],duration=117[ms],qe=79[ms],rcf=0,steps=140
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 7#Benchmarks/Basic/Static semantics correctness: Assignment 7 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 7#Benchmarks/Basic/Static semantics correctness: Assignment 7 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 7: tactic=Scripted proof,tacticsize=15,budget=60[s],duration=959[ms],qe=368[ms],rcf=0,steps=765
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 8#Benchmarks/Basic/Static semantics correctness: Assignment 8 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 8#Benchmarks/Basic/Static semantics correctness: Assignment 8 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 8: tactic=Scripted proof,tacticsize=15,budget=60[s],duration=913[ms],qe=316[ms],rcf=0,steps=794
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 9#Benchmarks/Basic/Static semantics correctness: Assignment 9 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 9#Benchmarks/Basic/Static semantics correctness: Assignment 9 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 9: tactic=Scripted proof,tacticsize=13,budget=60[s],duration=793[ms],qe=258[ms],rcf=0,steps=456
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Cascaded#Benchmarks/Basic/Dynamics: Cascaded ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Cascaded#Benchmarks/Basic/Dynamics: Cascaded (proved)
PROVED Benchmarks/Basic/Dynamics: Cascaded: tactic=Scripted proof,tacticsize=8,budget=60[s],duration=1688[ms],qe=585[ms],rcf=0,steps=1510
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Single integrator time#Benchmarks/Basic/Dynamics: Single integrator time ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Single integrator time#Benchmarks/Basic/Dynamics: Single integrator time (proved)
PROVED Benchmarks/Basic/Dynamics: Single integrator time: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=585[ms],qe=154[ms],rcf=0,steps=164
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Single integrator#Benchmarks/Basic/Dynamics: Single integrator ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Single integrator#Benchmarks/Basic/Dynamics: Single integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Single integrator: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=622[ms],qe=97[ms],rcf=0,steps=152
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Double integrator#Benchmarks/Basic/Dynamics: Double integrator ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Double integrator#Benchmarks/Basic/Dynamics: Double integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Double integrator: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=4377[ms],qe=1728[ms],rcf=0,steps=1327
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Triple integrator#Benchmarks/Basic/Dynamics: Triple integrator ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Triple integrator#Benchmarks/Basic/Dynamics: Triple integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Triple integrator: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=1382[ms],qe=518[ms],rcf=0,steps=1069
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (1)#Benchmarks/Basic/Dynamics: Exponential decay (1) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (1)#Benchmarks/Basic/Dynamics: Exponential decay (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (1): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=742[ms],qe=222[ms],rcf=0,steps=144
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (2)#Benchmarks/Basic/Dynamics: Exponential decay (2) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (2)#Benchmarks/Basic/Dynamics: Exponential decay (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (2): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=660[ms],qe=201[ms],rcf=0,steps=144
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (3)#Benchmarks/Basic/Dynamics: Exponential decay (3) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (3)#Benchmarks/Basic/Dynamics: Exponential decay (3) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (3): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=742[ms],qe=230[ms],rcf=0,steps=199
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (1)#Benchmarks/Basic/Dynamics: Exponential growth (1) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (1)#Benchmarks/Basic/Dynamics: Exponential growth (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (1): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=635[ms],qe=139[ms],rcf=0,steps=194
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (2)#Benchmarks/Basic/Dynamics: Exponential growth (2) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (2)#Benchmarks/Basic/Dynamics: Exponential growth (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (2): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=840[ms],qe=257[ms],rcf=0,steps=526
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (4)#Benchmarks/Basic/Dynamics: Exponential growth (4) ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (4)#Benchmarks/Basic/Dynamics: Exponential growth (4) (failed)
FAILED Benchmarks/Basic/Dynamics: Exponential growth (4): tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (5)#Benchmarks/Basic/Dynamics: Exponential growth (5) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (5)#Benchmarks/Basic/Dynamics: Exponential growth (5) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (5): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=838[ms],qe=291[ms],rcf=0,steps=333
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (1)#Benchmarks/Basic/Dynamics: Rotational dynamics (1) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (1)#Benchmarks/Basic/Dynamics: Rotational dynamics (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (1): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=897[ms],qe=234[ms],rcf=0,steps=417
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (2)#Benchmarks/Basic/Dynamics: Rotational dynamics (2) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (2)#Benchmarks/Basic/Dynamics: Rotational dynamics (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (2): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=2732[ms],qe=957[ms],rcf=0,steps=3117
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (3)#Benchmarks/Basic/Dynamics: Rotational dynamics (3) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (3)#Benchmarks/Basic/Dynamics: Rotational dynamics (3) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (3): tactic=Scripted proof,tacticsize=2,budget=60[s],duration=1465[ms],qe=547[ms],rcf=0,steps=1577
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Spiral to equilibrium#Benchmarks/Basic/Dynamics: Spiral to equilibrium ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Spiral to equilibrium#Benchmarks/Basic/Dynamics: Spiral to equilibrium (proved)
PROVED Benchmarks/Basic/Dynamics: Spiral to equilibrium: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=1000[ms],qe=294[ms],rcf=0,steps=514
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Open cases#Benchmarks/Basic/Dynamics: Open cases ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Open cases#Benchmarks/Basic/Dynamics: Open cases (proved)
PROVED Benchmarks/Basic/Dynamics: Open cases: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=1176[ms],qe=456[ms],rcf=0,steps=507
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Closed cases#Benchmarks/Basic/Dynamics: Closed cases ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Closed cases#Benchmarks/Basic/Dynamics: Closed cases (proved)
PROVED Benchmarks/Basic/Dynamics: Closed cases: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=762[ms],qe=162[ms],rcf=0,steps=398
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Conserved quantity#Benchmarks/Basic/Dynamics: Conserved quantity ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Conserved quantity#Benchmarks/Basic/Dynamics: Conserved quantity (proved)
PROVED Benchmarks/Basic/Dynamics: Conserved quantity: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=3367[ms],qe=2689[ms],rcf=0,steps=513
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Darboux equality#Benchmarks/Basic/Dynamics: Darboux equality ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Darboux equality#Benchmarks/Basic/Dynamics: Darboux equality (proved)
PROVED Benchmarks/Basic/Dynamics: Darboux equality: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=933[ms],qe=258[ms],rcf=0,steps=506
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Fractional Darboux equality#Benchmarks/Basic/Dynamics: Fractional Darboux equality ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Fractional Darboux equality#Benchmarks/Basic/Dynamics: Fractional Darboux equality (failed)
FAILED Benchmarks/Basic/Dynamics: Fractional Darboux equality: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Darboux inequality#Benchmarks/Basic/Dynamics: Darboux inequality ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Darboux inequality#Benchmarks/Basic/Dynamics: Darboux inequality (proved)
PROVED Benchmarks/Basic/Dynamics: Darboux inequality: tactic=Scripted proof,tacticsize=3,budget=60[s],duration=190[ms],qe=62[ms],rcf=0,steps=215
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Bifurcation#Benchmarks/Basic/Dynamics: Bifurcation ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Bifurcation#Benchmarks/Basic/Dynamics: Bifurcation (proved)
PROVED Benchmarks/Basic/Dynamics: Bifurcation: tactic=Scripted proof,tacticsize=35,budget=60[s],duration=905[ms],qe=556[ms],rcf=0,steps=1500
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators (failed)
FAILED Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 1#Benchmarks/Basic/Dynamics: Nonlinear 1 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 1#Benchmarks/Basic/Dynamics: Nonlinear 1 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 1: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=872[ms],qe=257[ms],rcf=0,steps=423
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 2#Benchmarks/Basic/Dynamics: Nonlinear 2 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 2#Benchmarks/Basic/Dynamics: Nonlinear 2 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 2: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=921[ms],qe=252[ms],rcf=0,steps=454
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 4#Benchmarks/Basic/Dynamics: Nonlinear 4 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 4#Benchmarks/Basic/Dynamics: Nonlinear 4 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 4: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=889[ms],qe=277[ms],rcf=0,steps=452
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 5#Benchmarks/Basic/Dynamics: Nonlinear 5 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 5#Benchmarks/Basic/Dynamics: Nonlinear 5 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 5: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=801[ms],qe=223[ms],rcf=0,steps=387
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Riccati#Benchmarks/Basic/Dynamics: Riccati ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Riccati#Benchmarks/Basic/Dynamics: Riccati (proved)
PROVED Benchmarks/Basic/Dynamics: Riccati: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=864[ms],qe=234[ms],rcf=0,steps=274
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear differential cut#Benchmarks/Basic/Dynamics: Nonlinear differential cut ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear differential cut#Benchmarks/Basic/Dynamics: Nonlinear differential cut (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear differential cut: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=1268[ms],qe=402[ms],rcf=0,steps=680
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism (failed)
FAILED Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 1#Benchmarks/Basic/STTT Tutorial: Example 1 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 1#Benchmarks/Basic/STTT Tutorial: Example 1 (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 1: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=608[ms],qe=149[ms],rcf=0,steps=220
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 2#Benchmarks/Basic/STTT Tutorial: Example 2 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 2#Benchmarks/Basic/STTT Tutorial: Example 2 (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 2: tactic=Scripted proof,tacticsize=11,budget=60[s],duration=287[ms],qe=0[ms],rcf=0,steps=148
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 3a#Benchmarks/Basic/STTT Tutorial: Example 3a ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 3a#Benchmarks/Basic/STTT Tutorial: Example 3a (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 3a: tactic=Scripted proof,tacticsize=8,budget=60[s],duration=4704[ms],qe=1938[ms],rcf=0,steps=9172
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4a#Benchmarks/Basic/STTT Tutorial: Example 4a ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4a#Benchmarks/Basic/STTT Tutorial: Example 4a (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4a: tactic=Scripted proof,tacticsize=11,budget=60[s],duration=269[ms],qe=0[ms],rcf=0,steps=143
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4b#Benchmarks/Basic/STTT Tutorial: Example 4b ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4b#Benchmarks/Basic/STTT Tutorial: Example 4b (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4b: tactic=Scripted proof,tacticsize=11,budget=60[s],duration=278[ms],qe=0[ms],rcf=0,steps=143
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4c#Benchmarks/Basic/STTT Tutorial: Example 4c ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4c#Benchmarks/Basic/STTT Tutorial: Example 4c (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4c: tactic=Scripted proof,tacticsize=20,budget=60[s],duration=862[ms],qe=233[ms],rcf=0,steps=656
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 5#Benchmarks/Basic/STTT Tutorial: Example 5 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 5#Benchmarks/Basic/STTT Tutorial: Example 5 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 5: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 6#Benchmarks/Basic/STTT Tutorial: Example 6 ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 6#Benchmarks/Basic/STTT Tutorial: Example 6 (failed)
FAILED Benchmarks/Basic/STTT Tutorial: Example 6: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 7#Benchmarks/Basic/STTT Tutorial: Example 7 ...
INFO  ===== QE... ==== ElidingProvable(Provable{
   -1:  A()>0	Greater
   -2:  B()>=b()	GreaterEqual
   -3:  b()>0	Greater
   -4:  ep()>0	Greater
   -5:  x+v^2/(2*b())+(A()/b()+1)*(A()/2*ep()^2+ep()*v)<=S()	LessEqual
   -6:  t_>=0	GreaterEqual
   -7:  \forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep())	Forall
   -8:  v>=0	GreaterEqual
   -9:  x+v^2/(2*b())<=S()	LessEqual
   -10:  -B()<=a	LessEqual
   -11:  a<=A()	LessEqual
==> 1:  a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b())<=S()	LessEqual
  from
   -1:  A()>0	Greater
   -2:  B()>=b()	GreaterEqual
   -3:  b()>0	Greater
   -4:  ep()>0	Greater
   -5:  x+v^2/(2*b())+(A()/b()+1)*(A()/2*ep()^2+ep()*v)<=S()	LessEqual
   -6:  t_>=0	GreaterEqual
   -7:  \forall s_ (0<=s_&s_<=t_->a*s_+v>=0&s_+0<=ep())	Forall
   -8:  v>=0	GreaterEqual
   -9:  x+v^2/(2*b())<=S()	LessEqual
   -10:  -B()<=a	LessEqual
   -11:  a<=A()	LessEqual
==> 1:  a*(t_^2/2)+v*t_+x+(a*t_+v)^2/(2*b())<=S()	LessEqual}) =====
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 7#Benchmarks/Basic/STTT Tutorial: Example 7 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 7: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 9a#Benchmarks/Basic/STTT Tutorial: Example 9a ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 9a#Benchmarks/Basic/STTT Tutorial: Example 9a (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 9a: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=939[ms],qe=307[ms],rcf=0,steps=547
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 9b#Benchmarks/Basic/STTT Tutorial: Example 9b ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 9b#Benchmarks/Basic/STTT Tutorial: Example 9b (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 9b: tactic=Scripted proof,tacticsize=15,budget=60[s],duration=1168[ms],qe=757[ms],rcf=0,steps=2180
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 10#Benchmarks/Basic/STTT Tutorial: Example 10 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 10#Benchmarks/Basic/STTT Tutorial: Example 10 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 10: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward (proved)
PROVED Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward: tactic=Scripted proof,tacticsize=5,budget=60[s],duration=251[ms],qe=0[ms],rcf=0,steps=77
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 2 Single car drives forward#Benchmarks/Basic/LICS: Example 2 Single car drives forward ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 2 Single car drives forward#Benchmarks/Basic/LICS: Example 2 Single car drives forward (proved)
PROVED Benchmarks/Basic/LICS: Example 2 Single car drives forward: tactic=Scripted proof,tacticsize=11,budget=60[s],duration=287[ms],qe=0[ms],rcf=0,steps=148
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward (proved)
PROVED Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward: tactic=Scripted proof,tacticsize=11,budget=60[s],duration=284[ms],qe=0[ms],rcf=0,steps=148
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car (proved)
PROVED Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car: tactic=Scripted proof,tacticsize=11,budget=60[s],duration=1778[ms],qe=645[ms],rcf=0,steps=3473
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car (failed)
FAILED Benchmarks/Basic/LICS: Example 4b progress of time-triggered car: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car (proved)
PROVED Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car: tactic=Scripted proof,tacticsize=13,budget=60[s],duration=2242[ms],qe=859[ms],rcf=0,steps=4990
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence (proved)
PROVED Benchmarks/Basic/LICS: Example 5 Controllability Equivalence: tactic=Scripted proof,tacticsize=7,budget=60[s],duration=1743[ms],qe=527[ms],rcf=0,steps=3108
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence (failed)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
FAILED Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car (proved)
PROVED Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car: tactic=Scripted proof,tacticsize=43,budget=60[s],duration=1428[ms],qe=324[ms],rcf=0,steps=1891
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx#Benchmarks/Games/Dual Filibuster Game#Benchmarks/Games/Dual Filibuster Game ...
Done /ismail/kyx5/games.kyx#Benchmarks/Games/Dual Filibuster Game#Benchmarks/Games/Dual Filibuster Game (proved)
PROVED Benchmarks/Games/Dual Filibuster Game: tactic=Scripted proof,tacticsize=11,budget=60[s],duration=90[ms],qe=39[ms],rcf=0,steps=56
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx#Benchmarks/Games/Push-around cart#Benchmarks/Games/Push-around cart ...
Done /ismail/kyx5/games.kyx#Benchmarks/Games/Push-around cart#Benchmarks/Games/Push-around cart (proved)
PROVED Benchmarks/Games/Push-around cart: tactic=Scripted proof,tacticsize=27,budget=60[s],duration=506[ms],qe=220[ms],rcf=0,steps=875
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx#Benchmarks/Games/Goalie in robot soccer#Benchmarks/Games/Goalie in robot soccer ...
Done /ismail/kyx5/games.kyx#Benchmarks/Games/Goalie in robot soccer#Benchmarks/Games/Goalie in robot soccer (proved)
PROVED Benchmarks/Games/Goalie in robot soccer: tactic=Scripted proof,tacticsize=36,budget=60[s],duration=2297[ms],qe=695[ms],rcf=0,steps=4615
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic (proved)
PROVED Benchmarks/Nonlinear/Ahmadi Parrilo Krstic: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=508[ms],qe=175[ms],rcf=0,steps=353
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83 (proved)
PROVED Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=602[ms],qe=217[ms],rcf=0,steps=324
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79 (proved)
PROVED Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1297[ms],qe=430[ms],rcf=0,steps=850
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet (failed)
FAILED Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo (proved)
PROVED Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=933[ms],qe=316[ms],rcf=0,steps=934
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68 ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68 (failed)
FAILED Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collin Goriely page 60#Benchmarks/Nonlinear/Collin Goriely page 60 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collin Goriely page 60#Benchmarks/Nonlinear/Collin Goriely page 60 (proved)
PROVED Benchmarks/Nonlinear/Collin Goriely page 60: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=732[ms],qe=321[ms],rcf=0,steps=705
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2 ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2 (failed)
FAILED Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5 ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5 (failed)
FAILED Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58 ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58 (failed)
FAILED Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2 (proved)
PROVED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=1324[ms],qe=438[ms],rcf=0,steps=1204
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11 (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=1377[ms],qe=594[ms],rcf=0,steps=637
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=539[ms],qe=176[ms],rcf=0,steps=352
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i: tactic=Scripted proof,tacticsize=5,budget=60[s],duration=956[ms],qe=438[ms],rcf=0,steps=629
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=602[ms],qe=254[ms],rcf=0,steps=396
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9 (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=550[ms],qe=208[ms],rcf=0,steps=352
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=769[ms],qe=347[ms],rcf=0,steps=741
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a: tactic=Scripted proof,tacticsize=8,budget=60[s],duration=1016[ms],qe=519[ms],rcf=0,steps=1003
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2 (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=4549[ms],qe=2010[ms],rcf=0,steps=4762
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=790[ms],qe=353[ms],rcf=0,steps=741
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2 ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2 (failed)
FAILED Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99 (proved)
PROVED Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=1035[ms],qe=335[ms],rcf=0,steps=1127
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119 (proved)
PROVED Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=527[ms],qe=179[ms],rcf=0,steps=328
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hamiltonian System 1#Benchmarks/Nonlinear/Hamiltonian System 1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hamiltonian System 1#Benchmarks/Nonlinear/Hamiltonian System 1 (proved)
PROVED Benchmarks/Nonlinear/Hamiltonian System 1: tactic=Scripted proof,tacticsize=8,budget=60[s],duration=1230[ms],qe=487[ms],rcf=0,steps=1057
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hybrid Controller Mode 1#Benchmarks/Nonlinear/Hybrid Controller Mode 1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hybrid Controller Mode 1#Benchmarks/Nonlinear/Hybrid Controller Mode 1 (proved)
PROVED Benchmarks/Nonlinear/Hybrid Controller Mode 1: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=3670[ms],qe=3477[ms],rcf=0,steps=415
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hybrid Controller Mode 2#Benchmarks/Nonlinear/Hybrid Controller Mode 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hybrid Controller Mode 2#Benchmarks/Nonlinear/Hybrid Controller Mode 2 (proved)
PROVED Benchmarks/Nonlinear/Hybrid Controller Mode 2: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=14563[ms],qe=14352[ms],rcf=0,steps=417
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 6#Benchmarks/Nonlinear/Invariant Clusters Example 6 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 6#Benchmarks/Nonlinear/Invariant Clusters Example 6 (proved)
PROVED Benchmarks/Nonlinear/Invariant Clusters Example 6: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=382[ms],qe=197[ms],rcf=0,steps=359
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 7#Benchmarks/Nonlinear/Invariant Clusters Example 7 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 7#Benchmarks/Nonlinear/Invariant Clusters Example 7 (proved)
PROVED Benchmarks/Nonlinear/Invariant Clusters Example 7: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=410[ms],qe=218[ms],rcf=0,steps=411
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Locally stable nonlinear system#Benchmarks/Nonlinear/Locally stable nonlinear system ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Locally stable nonlinear system#Benchmarks/Nonlinear/Locally stable nonlinear system (proved)
PROVED Benchmarks/Nonlinear/Locally stable nonlinear system: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=5870[ms],qe=4765[ms],rcf=0,steps=3014
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/MIT astronautics Lyapunov#Benchmarks/Nonlinear/MIT astronautics Lyapunov ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/MIT astronautics Lyapunov#Benchmarks/Nonlinear/MIT astronautics Lyapunov (proved)
PROVED Benchmarks/Nonlinear/MIT astronautics Lyapunov: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=654[ms],qe=255[ms],rcf=0,steps=412
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57 (proved)
PROVED Benchmarks/Nonlinear/Man Maccallum Goriely Page 57: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=674[ms],qe=222[ms],rcf=0,steps=369
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit Example 3#Benchmarks/Nonlinear/Nonlinear Circuit Example 3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit Example 3#Benchmarks/Nonlinear/Nonlinear Circuit Example 3 (proved)
PROVED Benchmarks/Nonlinear/Nonlinear Circuit Example 3: tactic=Scripted proof,tacticsize=5,budget=60[s],duration=874[ms],qe=300[ms],rcf=0,steps=1089
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Nonlinear Circuit Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Nonlinear Circuit Example 4 (failed)
FAILED Benchmarks/Nonlinear/Nonlinear Circuit Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator (proved)
PROVED Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=478[ms],qe=265[ms],rcf=0,steps=374
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant)#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant)#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant) (proved)
PROVED Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=497[ms],qe=174[ms],rcf=0,steps=321
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Stable Limit Cycle 2#Benchmarks/Nonlinear/Stable Limit Cycle 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Stable Limit Cycle 2#Benchmarks/Nonlinear/Stable Limit Cycle 2 (proved)
PROVED Benchmarks/Nonlinear/Stable Limit Cycle 2: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=984[ms],qe=339[ms],rcf=0,steps=539
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Example 6_3_2#Benchmarks/Nonlinear/Strogatz Example 6_3_2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Example 6_3_2#Benchmarks/Nonlinear/Strogatz Example 6_3_2 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Example 6_3_2: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=863[ms],qe=251[ms],rcf=0,steps=911
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Example 6_8_3#Benchmarks/Nonlinear/Strogatz Example 6_8_3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Example 6_8_3#Benchmarks/Nonlinear/Strogatz Example 6_8_3 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Example 6_8_3: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=506[ms],qe=176[ms],rcf=0,steps=328
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 6_1_5: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=1361[ms],qe=470[ms],rcf=0,steps=1258
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=530[ms],qe=196[ms],rcf=0,steps=328
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=814[ms],qe=335[ms],rcf=0,steps=671
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=917[ms],qe=396[ms],rcf=0,steps=768
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 7_3_5: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=971[ms],qe=435[ms],rcf=0,steps=776
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Unstable Unit Circle 2#Benchmarks/Nonlinear/Unstable Unit Circle 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Unstable Unit Circle 2#Benchmarks/Nonlinear/Unstable Unit Circle 2 (proved)
PROVED Benchmarks/Nonlinear/Unstable Unit Circle 2: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=625[ms],qe=232[ms],rcf=0,steps=346
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wien bridge oscillator#Benchmarks/Nonlinear/Wien bridge oscillator ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wien bridge oscillator#Benchmarks/Nonlinear/Wien bridge oscillator (timeout)
TIMEOUT Benchmarks/Nonlinear/Wien bridge oscillator: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wiggins Example 17_1_2#Benchmarks/Nonlinear/Wiggins Example 17_1_2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wiggins Example 17_1_2#Benchmarks/Nonlinear/Wiggins Example 17_1_2 (proved)
PROVED Benchmarks/Nonlinear/Wiggins Example 17_1_2: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=557[ms],qe=215[ms],rcf=0,steps=349
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n (proved)
PROVED Benchmarks/Nonlinear/Wiggins Example 18_7_3_n: tactic=Scripted proof,tacticsize=5,budget=60[s],duration=1862[ms],qe=780[ms],rcf=0,steps=1433
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C1#Benchmarks/Nonlinear/ZYLZCL Example C1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C1#Benchmarks/Nonlinear/ZYLZCL Example C1 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C1: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=471[ms],qe=249[ms],rcf=0,steps=520
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C3#Benchmarks/Nonlinear/ZYLZCL Example C3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C3#Benchmarks/Nonlinear/ZYLZCL Example C3 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C3: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=585[ms],qe=233[ms],rcf=0,steps=453
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C4#Benchmarks/Nonlinear/ZYLZCL Example C4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C4#Benchmarks/Nonlinear/ZYLZCL Example C4 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C4: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1120[ms],qe=349[ms],rcf=0,steps=1014
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C6#Benchmarks/Nonlinear/ZYLZCL Example C6 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C6#Benchmarks/Nonlinear/ZYLZCL Example C6 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C6: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1013[ms],qe=338[ms],rcf=0,steps=986
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C7#Benchmarks/Nonlinear/ZYLZCL Example C7 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C7#Benchmarks/Nonlinear/ZYLZCL Example C7 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C7: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=580[ms],qe=223[ms],rcf=0,steps=442
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C8#Benchmarks/Nonlinear/ZYLZCL Example C8 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C8#Benchmarks/Nonlinear/ZYLZCL Example C8 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C8: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=550[ms],qe=216[ms],rcf=0,steps=453
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator) (timeout)
TIMEOUT Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (proved)
PROVED Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=513[ms],qe=176[ms],rcf=0,steps=317
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (timeout)
TIMEOUT Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1: tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (proved)
PROVED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2: tactic=Scripted proof,tacticsize=8,budget=60[s],duration=1827[ms],qe=791[ms],rcf=0,steps=1494
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant) (proved)
PROVED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant): tactic=Scripted proof,tacticsize=9,budget=60[s],duration=1169[ms],qe=377[ms],rcf=0,steps=1198
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3 (proved)
PROVED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1418[ms],qe=469[ms],rcf=0,steps=1103
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4 (failed)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (proved)
PROVED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=1320[ms],qe=474[ms],rcf=0,steps=1294
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1) (proved)
PROVED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1): tactic=Scripted proof,tacticsize=12,budget=60[s],duration=1424[ms],qe=524[ms],rcf=0,steps=1601
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2) (proved)
PROVED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2): tactic=Scripted proof,tacticsize=9,budget=60[s],duration=1161[ms],qe=396[ms],rcf=0,steps=1228
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric) (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2: tactic=user,tacticsize=1,budget=60[s],duration=1897[ms],qe=832[ms],rcf=0,steps=951
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric) (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1093[ms],qe=363[ms],rcf=0,steps=1120
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3 (proved)
PROVED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=512[ms],qe=167[ms],rcf=0,steps=371
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5 (failed)
FAILED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (I)#Benchmarks/Nonlinear/3D Lotka Volterra (I) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (I)#Benchmarks/Nonlinear/3D Lotka Volterra (I) (proved)
PROVED Benchmarks/Nonlinear/3D Lotka Volterra (I): tactic=Scripted proof,tacticsize=12,budget=60[s],duration=1109[ms],qe=512[ms],rcf=0,steps=879
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (II)#Benchmarks/Nonlinear/3D Lotka Volterra (II) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (II)#Benchmarks/Nonlinear/3D Lotka Volterra (II) (proved)
PROVED Benchmarks/Nonlinear/3D Lotka Volterra (II): tactic=Scripted proof,tacticsize=12,budget=60[s],duration=1769[ms],qe=797[ms],rcf=0,steps=951
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (III)#Benchmarks/Nonlinear/3D Lotka Volterra (III) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (III)#Benchmarks/Nonlinear/3D Lotka Volterra (III) (proved)
PROVED Benchmarks/Nonlinear/3D Lotka Volterra (III): tactic=Scripted proof,tacticsize=12,budget=60[s],duration=876[ms],qe=416[ms],rcf=0,steps=900
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143 (proved)
PROVED Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=582[ms],qe=197[ms],rcf=0,steps=369
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth)#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth)#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth) (proved)
PROVED Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth): tactic=Scripted proof,tacticsize=18,budget=60[s],duration=877[ms],qe=344[ms],rcf=0,steps=752
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant 3-dim sphere#Benchmarks/Nonlinear/Invariant 3-dim sphere ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant 3-dim sphere#Benchmarks/Nonlinear/Invariant 3-dim sphere (proved)
PROVED Benchmarks/Nonlinear/Invariant 3-dim sphere: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=631[ms],qe=255[ms],rcf=0,steps=439
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 4#Benchmarks/Nonlinear/Invariant Clusters Example 4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 4#Benchmarks/Nonlinear/Invariant Clusters Example 4 (proved)
PROVED Benchmarks/Nonlinear/Invariant Clusters Example 4: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=355[ms],qe=173[ms],rcf=0,steps=342
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 5#Benchmarks/Nonlinear/Invariant Clusters Example 5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 5#Benchmarks/Nonlinear/Invariant Clusters Example 5 (proved)
PROVED Benchmarks/Nonlinear/Invariant Clusters Example 5: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=361[ms],qe=170[ms],rcf=0,steps=342
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Looping Particle#Benchmarks/Nonlinear/Looping Particle ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Looping Particle#Benchmarks/Nonlinear/Looping Particle (proved)
PROVED Benchmarks/Nonlinear/Looping Particle: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=587[ms],qe=293[ms],rcf=0,steps=379
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Shimizu Morioka System#Benchmarks/Nonlinear/Shimizu Morioka System ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Shimizu Morioka System#Benchmarks/Nonlinear/Shimizu Morioka System (proved)
PROVED Benchmarks/Nonlinear/Shimizu Morioka System: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=515[ms],qe=172[ms],rcf=0,steps=312
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C2#Benchmarks/Nonlinear/ZYLZCL Example C2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C2#Benchmarks/Nonlinear/ZYLZCL Example C2 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C2: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1091[ms],qe=344[ms],rcf=0,steps=1149
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric) (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=984[ms],qe=312[ms],rcf=0,steps=1214
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 ...
BigInteger out of long range

in _(1)
in <( skip, _(1) )
	(Failed on branch ((((_(1)|dRI(1)))*);_;_))
in <( <( skip, _(1) ) )
	(Failed on branch _)
in <( <( skip, _(1) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 192 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric) (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1153[ms],qe=393[ms],rcf=0,steps=1372
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=624[ms],qe=250[ms],rcf=0,steps=390
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=581[ms],qe=186[ms],rcf=0,steps=491
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=639[ms],qe=232[ms],rcf=0,steps=485
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=766[ms],qe=277[ms],rcf=0,steps=557
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=775[ms],qe=302[ms],rcf=0,steps=581
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7 (failed)
FAILED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1036[ms],qe=357[ms],rcf=0,steps=633
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1218[ms],qe=450[ms],rcf=0,steps=603
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1385[ms],qe=525[ms],rcf=0,steps=920
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1365[ms],qe=536[ms],rcf=0,steps=899
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1076[ms],qe=365[ms],rcf=0,steps=714
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=1122[ms],qe=386[ms],rcf=0,steps=743
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Coupled Spring-Mass System (I)#Benchmarks/Nonlinear/Coupled Spring-Mass System (I) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Coupled Spring-Mass System (I)#Benchmarks/Nonlinear/Coupled Spring-Mass System (I) (proved)
PROVED Benchmarks/Nonlinear/Coupled Spring-Mass System (I): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=33215[ms],qe=32682[ms],rcf=0,steps=722
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Coupled Spring-Mass System (II)#Benchmarks/Nonlinear/Coupled Spring-Mass System (II) ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Coupled Spring-Mass System (II)#Benchmarks/Nonlinear/Coupled Spring-Mass System (II) (failed)
FAILED Benchmarks/Nonlinear/Coupled Spring-Mass System (II): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Damped Mathieu System#Benchmarks/Nonlinear/Damped Mathieu System ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Damped Mathieu System#Benchmarks/Nonlinear/Damped Mathieu System (proved)
PROVED Benchmarks/Nonlinear/Damped Mathieu System: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=1248[ms],qe=603[ms],rcf=0,steps=994
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Flight Maneuvers (I)#Benchmarks/Nonlinear/Flight Maneuvers (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Flight Maneuvers (I)#Benchmarks/Nonlinear/Flight Maneuvers (I) (failed)
FAILED Benchmarks/Nonlinear/Flight Maneuvers (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=685[ms],qe=216[ms],rcf=0,steps=411
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=776[ms],qe=314[ms],rcf=0,steps=635
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=844[ms],qe=319[ms],rcf=0,steps=688
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum) (proved)
PROVED Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum): tactic=Scripted proof,tacticsize=6,budget=60[s],duration=452[ms],qe=240[ms],rcf=0,steps=598
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust) (failed)
FAILED Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust) (failed)
FAILED Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13: tactic=user,tacticsize=1,budget=60[s],duration=2508[ms],qe=1131[ms],rcf=0,steps=1475
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Space Craft: Collision Avoidance#Benchmarks/Nonlinear/Space Craft: Collision Avoidance ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:171)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absPolynomialReduce$1(ODEInvariance.scala:976)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$rank$17(ODEInvariance.scala:992)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:992)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:191)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Space Craft: Collision Avoidance#Benchmarks/Nonlinear/Space Craft: Collision Avoidance (failed)
FAILED Benchmarks/Nonlinear/Space Craft: Collision Avoidance: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=599[ms],qe=216[ms],rcf=0,steps=583
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8 (timeout)
TIMEOUT Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C9#Benchmarks/Nonlinear/ZYLZCL Example C9 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C9#Benchmarks/Nonlinear/ZYLZCL Example C9 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C9: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=605[ms],qe=387[ms],rcf=0,steps=1195
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I) (proved)
PROVED Benchmarks/Nonlinear/Collision Avoidance Maneuver (I): tactic=Scripted proof,tacticsize=15,budget=60[s],duration=1126[ms],qe=718[ms],rcf=0,steps=2492
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE) (proved)
PROVED Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE): tactic=Scripted proof,tacticsize=5,budget=60[s],duration=1017[ms],qe=574[ms],rcf=0,steps=1322
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II) (proved)
PROVED Benchmarks/Nonlinear/Collision Avoidance Maneuver (II): tactic=Scripted proof,tacticsize=15,budget=60[s],duration=1156[ms],qe=763[ms],rcf=0,steps=2645
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III) (failed)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
FAILED Benchmarks/Nonlinear/Collision Avoidance Maneuver (III): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Laub-Loomis#Benchmarks/Nonlinear/Laub-Loomis ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Laub-Loomis#Benchmarks/Nonlinear/Laub-Loomis (timeout)
TIMEOUT Benchmarks/Nonlinear/Laub-Loomis: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Planar 2-body problem#Benchmarks/Nonlinear/Planar 2-body problem ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Planar 2-body problem#Benchmarks/Nonlinear/Planar 2-body problem (failed)
FAILED Benchmarks/Nonlinear/Planar 2-body problem: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C10#Benchmarks/Nonlinear/ZYLZCL Example C10 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C10#Benchmarks/Nonlinear/ZYLZCL Example C10 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C10: tactic=Scripted proof,tacticsize=6,budget=60[s],duration=724[ms],qe=487[ms],rcf=0,steps=1500
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE) (proved)
PROVED Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE): tactic=Scripted proof,tacticsize=5,budget=60[s],duration=2054[ms],qe=1340[ms],rcf=0,steps=2219
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE) (proved)
PROVED Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE): tactic=Scripted proof,tacticsize=5,budget=60[s],duration=2907[ms],qe=1803[ms],rcf=0,steps=3030
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9 (failed)
FAILED Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3 (failed)
FAILED Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2 (failed)
FAILED Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System (failed)
FAILED Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4 (proved)
PROVED Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4: tactic=user,tacticsize=1,budget=60[s],duration=3116[ms],qe=1410[ms],rcf=0,steps=2084
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7 (proved)
PROVED Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7: tactic=Scripted proof,tacticsize=17,budget=60[s],duration=14869[ms],qe=8021[ms],rcf=0,steps=32851
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4 ...
User-supplied invariant x2right+yleft>0 not proved; please double-check and adapt invariant.
For example, invariant may hold on some branches but not all: consider using conditional annotations @invariant( (x'=0 -> invA), (x'=2 -> invB) ).
assertProvableSize failed: Expected to have 0 open goals but found an open goal with 1 subgoals:
ElidingProvable(Provable{
   -1:  (2/3+xleft)^2+yleft^2<=1/24	LessEqual
   -2:  -1.1<=x1right	LessEqual
   -3:  x1right<=-0.7	LessEqual
   -4:  0.5<=x2right	LessEqual
   -5:  x2right<=0.9	LessEqual
==> 1:  [{xleft'=-2*yleft,yleft'=-2*xleft-3*xleft^2,x1right'=-x2right^3,x2right'=x1right-x1right^3&true&true}]x2right+yleft>0	Box
  from
   -1:  (2/3+xleft)^2+yleft^2<=1/24	LessEqual
   -2:  -1.1<=x1right	LessEqual
   -3:  x1right<=-0.7	LessEqual
   -4:  0.5<=x2right	LessEqual
   -5:  x2right<=0.9	LessEqual
==> 1:  [{xleft'=-2*yleft,yleft'=-2*xleft-3*xleft^2,x1right'=-x2right^3,x2right'=x1right-x1right^3&true&true}]x2right+yleft>0	Box})

in <( skip, >>_<< )
	(Failed on branch ((((_(1)|dRI(1)))*);_;_))
in <( <( skip, >>_<< ) )
	(Failed on branch _)
in <( <( skip, >>_<< ) )
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.$anonfun$ODEImpl$8(TactixLibrary.scala:739)
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$10.result(MiscTactics.scala:229)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4 (failed)
FAILED Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1 (proved)
PROVED Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=966[ms],qe=464[ms],rcf=0,steps=1175
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I)#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I)#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I) (failed)
FAILED Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5 (failed)
FAILED Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4 (failed)
FAILED Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2 (failed)
FAILED Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere (failed)
FAILED Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4 (proved)
PROVED Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4: tactic=Scripted proof,tacticsize=9,budget=60[s],duration=2640[ms],qe=1025[ms],rcf=0,steps=3167
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Essentials#Benchmarks/Advanced/ETCS: Essentials ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Essentials#Benchmarks/Advanced/ETCS: Essentials (timeout)
TIMEOUT Benchmarks/Advanced/ETCS: Essentials: tactic=Scripted proof,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability)#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability) ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability)#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability) (proved)
PROVED Benchmarks/Advanced/ETCS: Proposition 1 (Controllability): tactic=Scripted proof,tacticsize=8,budget=300[s],duration=2033[ms],qe=681[ms],rcf=0,steps=3736
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity)#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity) ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity)#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity) (failed)
FAILED Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity): tactic=Scripted proof,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver (proved)
PROVED Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver: tactic=Scripted proof,tacticsize=15,budget=300[s],duration=1118[ms],qe=509[ms],rcf=0,steps=1519
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver (proved)
PROVED Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver: tactic=Scripted proof,tacticsize=17,budget=300[s],duration=2893[ms],qe=1623[ms],rcf=0,steps=3804
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver (proved)
PROVED Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver: tactic=Scripted proof,tacticsize=40,budget=300[s],duration=8524[ms],qe=3706[ms],rcf=0,steps=10882
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety (failed)
FAILED Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety: tactic=Scripted proof,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety ...
Failed to initialize first provider, attempting next
Failed to initialize first provider, attempting next
Failed to switch to Mathematica: unable to initialize the connection; the license may be expired.

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.setFirstSuccessfulProvider$2(ToolTactics.scala:65)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$switchSolver$8(ToolTactics.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$44.computeExpr(MiscTactics.scala:745)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety (failed)
FAILED Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety: tactic=Scripted proof,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear2.kyx#Benchmarks/Nonlinear/Robertson Chemical Reaction#Benchmarks/Nonlinear/Robertson Chemical Reaction ...
Done /ismail/kyx5/nonlinear2.kyx#Benchmarks/Nonlinear/Robertson Chemical Reaction#Benchmarks/Nonlinear/Robertson Chemical Reaction (proved)
PROVED Benchmarks/Nonlinear/Robertson Chemical Reaction: tactic=Scripted proof,tacticsize=2,budget=60[s],duration=269[ms],qe=104[ms],rcf=0,steps=326
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear2.kyx#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance)#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance) ...
Name conversion of exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >> not supported

in _QE
in <( (equalCommute(1);id), _QE )
	(Failed on branch (chaseAt(1);(QE) using "(exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >>(-1*x-3*y)*(-1*(3*x-3*x*y)-3*(1*x*y-1*y))*x^1+exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >>(-1*x-3*y)*(1*x^(1-1)*(3*x-3*x*y)))*y^3+exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >>(-1*x-3*y)*x^1*(3*y^(3-1)*(1*x*y-1*y))=0::nil"))
in <( (equalCommute(1);id), _QE )
Done /ismail/kyx5/nonlinear2.kyx#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance)#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance) (failed)
FAILED Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance): tactic=Scripted proof,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$94(SequentialInterpreter.scala:784)
	at scala.collection.immutable.Vector1.map(Vector.scala:2140)
	at scala.collection.immutable.Vector1.map(Vector.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:783)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:251)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:350)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: Name conversion of exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >> not supported
in 
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.nameIdentifier(SMTConverter.scala:107)
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.$anonfun$generateSMT$1(SMTConverter.scala:70)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.generateSMT(SMTConverter.scala:70)
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.generateAssertNegation(SMTConverter.scala:61)
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.apply(SMTConverter.scala:32)
	at edu.cmu.cs.ls.keymaerax.tools.qe.Z3Solver.qe(Z3Solver.scala:47)
	at edu.cmu.cs.ls.keymaerax.tools.qe.Z3QETool.quantifierElimination(Z3QETool.scala:54)
	at edu.cmu.cs.ls.keymaerax.core.Provable$.proveArithmetic(Proof.scala:698)
	at edu.cmu.cs.ls.keymaerax.pt.ElidingProvable$.proveArithmetic(TermProvable.scala:513)
	at edu.cmu.cs.ls.keymaerax.pt.ElidingProvable$.proveArithmeticLemma(TermProvable.scala:516)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig$.proveArithmeticLemma(TermProvable.scala:435)
	at edu.cmu.cs.ls.keymaerax.tools.ext.Z3.qe(Z3.scala:60)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$rcf$3(ToolTactics.scala:643)
	at scala.Option.map(Option.scala:242)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$rcf$1(ToolTactics.scala:628)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$53.result(MiscTactics.scala:881)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:607)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:604)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.Idioms$$anon$17.result(MiscTactics.scala:486)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:607)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:604)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:87)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig.$anonfun$apply$1(TermProvable.scala:160)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig.$anonfun$apply$1$adapted(TermProvable.scala:160)
	at scala.collection.IterableOnceOps.foldLeft(IterableOnce.scala:687)
	at scala.collection.IterableOnceOps.foldLeft$(IterableOnce.scala:721)
	at scala.collection.AbstractIterable.foldLeft(Iterable.scala:935)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig.apply(TermProvable.scala:160)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig.apply$(TermProvable.scala:157)
	at edu.cmu.cs.ls.keymaerax.pt.ElidingProvable.apply(TermProvable.scala:443)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$prepareQE$13(ToolTactics.scala:189)
	at edu.cmu.cs.ls.keymaerax.btactics.Idioms$$anon$17.result(MiscTactics.scala:486)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:607)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.Idioms$.$anonfun$or$1(MiscTactics.scala:373)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig.apply(TermProvable.scala:154)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig.apply$(TermProvable.scala:153)
	at edu.cmu.cs.ls.keymaerax.pt.ElidingProvable.apply(TermProvable.scala:443)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$prepareQE$1(ToolTactics.scala:206)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$53.result(MiscTactics.scala:881)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$57(SequentialInterpreter.scala:651)
	at scala.util.Try$.apply(Try.scala:217)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:651)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.$anonfun$remember$2(AnonymousLemmas.scala:54)
	at scala.Option.getOrElse(Option.scala:201)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.remember(AnonymousLemmas.scala:54)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.$anonfun$cacheTacticResult$2(AnonymousLemmas.scala:30)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.$anonfun$cacheTacticResult$2$adapted(AnonymousLemmas.scala:30)
	at scala.collection.immutable.Range.map(Range.scala:59)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.$anonfun$cacheTacticResult$1(AnonymousLemmas.scala:30)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$53.result(MiscTactics.scala:881)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	... 54 more
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 1#Benchmarks/Basic/Static semantics correctness: Assignment 1 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 1#Benchmarks/Basic/Static semantics correctness: Assignment 1 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 1: tactic=user,tacticsize=1,budget=60[s],duration=61[ms],qe=33[ms],rcf=0,steps=38
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 2#Benchmarks/Basic/Static semantics correctness: Assignment 2 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 2#Benchmarks/Basic/Static semantics correctness: Assignment 2 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 2: tactic=user,tacticsize=1,budget=60[s],duration=125[ms],qe=67[ms],rcf=0,steps=114
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 3#Benchmarks/Basic/Static semantics correctness: Assignment 3 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 3#Benchmarks/Basic/Static semantics correctness: Assignment 3 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 3: tactic=user,tacticsize=1,budget=60[s],duration=179[ms],qe=68[ms],rcf=0,steps=154
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 4#Benchmarks/Basic/Static semantics correctness: Assignment 4 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 4#Benchmarks/Basic/Static semantics correctness: Assignment 4 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 4: tactic=user,tacticsize=1,budget=60[s],duration=691[ms],qe=115[ms],rcf=0,steps=576
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 5#Benchmarks/Basic/Static semantics correctness: Assignment 5 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 5#Benchmarks/Basic/Static semantics correctness: Assignment 5 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 5: tactic=user,tacticsize=1,budget=60[s],duration=59[ms],qe=0[ms],rcf=0,steps=33
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 6#Benchmarks/Basic/Static semantics correctness: Assignment 6 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 6#Benchmarks/Basic/Static semantics correctness: Assignment 6 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 6: tactic=user,tacticsize=1,budget=60[s],duration=137[ms],qe=84[ms],rcf=0,steps=134
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 7#Benchmarks/Basic/Static semantics correctness: Assignment 7 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 7#Benchmarks/Basic/Static semantics correctness: Assignment 7 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 7: tactic=user,tacticsize=1,budget=60[s],duration=913[ms],qe=238[ms],rcf=0,steps=944
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 8#Benchmarks/Basic/Static semantics correctness: Assignment 8 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 8#Benchmarks/Basic/Static semantics correctness: Assignment 8 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 8: tactic=user,tacticsize=1,budget=60[s],duration=1455[ms],qe=437[ms],rcf=0,steps=925
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 9#Benchmarks/Basic/Static semantics correctness: Assignment 9 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Static semantics correctness: Assignment 9#Benchmarks/Basic/Static semantics correctness: Assignment 9 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 9: tactic=user,tacticsize=1,budget=60[s],duration=895[ms],qe=248[ms],rcf=0,steps=490
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Cascaded#Benchmarks/Basic/Dynamics: Cascaded ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Cascaded#Benchmarks/Basic/Dynamics: Cascaded (proved)
PROVED Benchmarks/Basic/Dynamics: Cascaded: tactic=user,tacticsize=1,budget=60[s],duration=1746[ms],qe=606[ms],rcf=0,steps=1656
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Single integrator time#Benchmarks/Basic/Dynamics: Single integrator time ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Single integrator time#Benchmarks/Basic/Dynamics: Single integrator time (proved)
PROVED Benchmarks/Basic/Dynamics: Single integrator time: tactic=user,tacticsize=1,budget=60[s],duration=620[ms],qe=148[ms],rcf=0,steps=164
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Single integrator#Benchmarks/Basic/Dynamics: Single integrator ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Single integrator#Benchmarks/Basic/Dynamics: Single integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Single integrator: tactic=user,tacticsize=1,budget=60[s],duration=559[ms],qe=85[ms],rcf=0,steps=152
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Double integrator#Benchmarks/Basic/Dynamics: Double integrator ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Double integrator#Benchmarks/Basic/Dynamics: Double integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Double integrator: tactic=user,tacticsize=1,budget=60[s],duration=4371[ms],qe=1695[ms],rcf=0,steps=1325
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Triple integrator#Benchmarks/Basic/Dynamics: Triple integrator ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Triple integrator#Benchmarks/Basic/Dynamics: Triple integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Triple integrator: tactic=user,tacticsize=1,budget=60[s],duration=1393[ms],qe=522[ms],rcf=0,steps=1054
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (1)#Benchmarks/Basic/Dynamics: Exponential decay (1) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (1)#Benchmarks/Basic/Dynamics: Exponential decay (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (1): tactic=user,tacticsize=1,budget=60[s],duration=874[ms],qe=274[ms],rcf=0,steps=318
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (2)#Benchmarks/Basic/Dynamics: Exponential decay (2) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (2)#Benchmarks/Basic/Dynamics: Exponential decay (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (2): tactic=user,tacticsize=1,budget=60[s],duration=949[ms],qe=302[ms],rcf=0,steps=318
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (3)#Benchmarks/Basic/Dynamics: Exponential decay (3) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential decay (3)#Benchmarks/Basic/Dynamics: Exponential decay (3) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (3): tactic=user,tacticsize=1,budget=60[s],duration=935[ms],qe=300[ms],rcf=0,steps=377
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (1)#Benchmarks/Basic/Dynamics: Exponential growth (1) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (1)#Benchmarks/Basic/Dynamics: Exponential growth (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (1): tactic=user,tacticsize=1,budget=60[s],duration=662[ms],qe=144[ms],rcf=0,steps=307
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (2)#Benchmarks/Basic/Dynamics: Exponential growth (2) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (2)#Benchmarks/Basic/Dynamics: Exponential growth (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (2): tactic=user,tacticsize=1,budget=60[s],duration=891[ms],qe=268[ms],rcf=0,steps=523
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (4)#Benchmarks/Basic/Dynamics: Exponential growth (4) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (4)#Benchmarks/Basic/Dynamics: Exponential growth (4) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (4): tactic=user,tacticsize=1,budget=60[s],duration=1183[ms],qe=365[ms],rcf=0,steps=813
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (5)#Benchmarks/Basic/Dynamics: Exponential growth (5) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Exponential growth (5)#Benchmarks/Basic/Dynamics: Exponential growth (5) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (5): tactic=user,tacticsize=1,budget=60[s],duration=902[ms],qe=309[ms],rcf=0,steps=506
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (1)#Benchmarks/Basic/Dynamics: Rotational dynamics (1) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (1)#Benchmarks/Basic/Dynamics: Rotational dynamics (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (1): tactic=user,tacticsize=1,budget=60[s],duration=992[ms],qe=302[ms],rcf=0,steps=678
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (2)#Benchmarks/Basic/Dynamics: Rotational dynamics (2) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (2)#Benchmarks/Basic/Dynamics: Rotational dynamics (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (2): tactic=user,tacticsize=1,budget=60[s],duration=2887[ms],qe=1049[ms],rcf=0,steps=3517
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (3)#Benchmarks/Basic/Dynamics: Rotational dynamics (3) ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Rotational dynamics (3)#Benchmarks/Basic/Dynamics: Rotational dynamics (3) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (3): tactic=user,tacticsize=1,budget=60[s],duration=1761[ms],qe=763[ms],rcf=0,steps=2245
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Spiral to equilibrium#Benchmarks/Basic/Dynamics: Spiral to equilibrium ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Spiral to equilibrium#Benchmarks/Basic/Dynamics: Spiral to equilibrium (proved)
PROVED Benchmarks/Basic/Dynamics: Spiral to equilibrium: tactic=user,tacticsize=1,budget=60[s],duration=1244[ms],qe=426[ms],rcf=0,steps=782
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Open cases#Benchmarks/Basic/Dynamics: Open cases ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Open cases#Benchmarks/Basic/Dynamics: Open cases (proved)
PROVED Benchmarks/Basic/Dynamics: Open cases: tactic=user,tacticsize=1,budget=60[s],duration=1351[ms],qe=567[ms],rcf=0,steps=837
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Closed cases#Benchmarks/Basic/Dynamics: Closed cases ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Closed cases#Benchmarks/Basic/Dynamics: Closed cases (proved)
PROVED Benchmarks/Basic/Dynamics: Closed cases: tactic=user,tacticsize=1,budget=60[s],duration=807[ms],qe=189[ms],rcf=0,steps=604
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Conserved quantity#Benchmarks/Basic/Dynamics: Conserved quantity ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Conserved quantity#Benchmarks/Basic/Dynamics: Conserved quantity (proved)
PROVED Benchmarks/Basic/Dynamics: Conserved quantity: tactic=user,tacticsize=1,budget=60[s],duration=3441[ms],qe=2697[ms],rcf=0,steps=513
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Darboux equality#Benchmarks/Basic/Dynamics: Darboux equality ...
Substitution clash:
edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper@1ef0cac1
is not ({x,y})-admissible
for A*y
when substituting in a()


in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: Substitution clash:
edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper@1ef0cac1
is not ({x,y})-admissible
for A*y
when substituting in a()

in 
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper.requireAdmissible(SubstitutionHelper.scala:249)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper.edu$cmu$cs$ls$keymaerax$infrastruct$SubstitutionHelper$$usubst(SubstitutionHelper.scala:133)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper.edu$cmu$cs$ls$keymaerax$infrastruct$SubstitutionHelper$$usubst(SubstitutionHelper.scala:119)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper.edu$cmu$cs$ls$keymaerax$infrastruct$SubstitutionHelper$$usubst(SubstitutionHelper.scala:115)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper.usubst(SubstitutionHelper.scala:225)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper.usubst(SubstitutionHelper.scala:223)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper.edu$cmu$cs$ls$keymaerax$infrastruct$SubstitutionHelper$$usubst(SubstitutionHelper.scala:188)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper$.replacesFree(SubstitutionHelper.scala:49)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SubstitutionHelper$.replaceFree(SubstitutionHelper.scala:74)
	at edu.cmu.cs.ls.keymaerax.infrastruct.Augmentors$ProgramAugmentor.replaceFree(Augmentors.scala:275)
	at edu.cmu.cs.ls.keymaerax.infrastruct.NonSubstUnificationMatch$NaiveSubst.$anonfun$apply$17(UnificationMatchImpl.scala:841)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.infrastruct.NonSubstUnificationMatch$NaiveSubst.apply(UnificationMatchImpl.scala:841)
	at edu.cmu.cs.ls.keymaerax.infrastruct.NonSubstUnificationMatch$NaiveSubst.apply(UnificationMatchImpl.scala:837)
	at edu.cmu.cs.ls.keymaerax.btactics.ConfigurableGenerator.$anonfun$findConditionalDiffInv$1(Generator.scala:120)
	at edu.cmu.cs.ls.keymaerax.btactics.ConfigurableGenerator.$anonfun$findConditionalDiffInv$1$adapted(Generator.scala:117)
	at scala.collection.IterableOnceOps.find(IterableOnce.scala:678)
	at scala.collection.IterableOnceOps.find$(IterableOnce.scala:674)
	at scala.collection.AbstractIterable.find(Iterable.scala:935)
	at edu.cmu.cs.ls.keymaerax.btactics.ConfigurableGenerator.findConditionalDiffInv(Generator.scala:117)
	at edu.cmu.cs.ls.keymaerax.btactics.ConfigurableGenerator.$anonfun$findPrgProducts$5(Generator.scala:100)
	at scala.Option.getOrElse(Option.scala:201)
	at edu.cmu.cs.ls.keymaerax.btactics.ConfigurableGenerator.findPrgProducts(Generator.scala:100)
	at edu.cmu.cs.ls.keymaerax.btactics.ConfigurableGenerator.apply(Generator.scala:76)
	at edu.cmu.cs.ls.keymaerax.btactics.ConfigurableGenerator.apply(Generator.scala:73)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.$anonfun$ODEImpl$1(TactixLibrary.scala:724)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$32$$anon$33.computeExpr(MiscTactics.scala:685)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 103 more
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Darboux equality#Benchmarks/Basic/Dynamics: Darboux equality (failed)
FAILED Benchmarks/Basic/Dynamics: Darboux equality: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Fractional Darboux equality#Benchmarks/Basic/Dynamics: Fractional Darboux equality ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Fractional Darboux equality#Benchmarks/Basic/Dynamics: Fractional Darboux equality (failed)
FAILED Benchmarks/Basic/Dynamics: Fractional Darboux equality: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Darboux inequality#Benchmarks/Basic/Dynamics: Darboux inequality ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Darboux inequality#Benchmarks/Basic/Dynamics: Darboux inequality (failed)
FAILED Benchmarks/Basic/Dynamics: Darboux inequality: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Bifurcation#Benchmarks/Basic/Dynamics: Bifurcation ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Bifurcation#Benchmarks/Basic/Dynamics: Bifurcation (failed)
FAILED Benchmarks/Basic/Dynamics: Bifurcation: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators (proved)
PROVED Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators: tactic=user,tacticsize=1,budget=60[s],duration=2548[ms],qe=966[ms],rcf=0,steps=1414
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 1#Benchmarks/Basic/Dynamics: Nonlinear 1 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 1#Benchmarks/Basic/Dynamics: Nonlinear 1 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 1: tactic=user,tacticsize=1,budget=60[s],duration=938[ms],qe=283[ms],rcf=0,steps=423
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 2#Benchmarks/Basic/Dynamics: Nonlinear 2 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 2#Benchmarks/Basic/Dynamics: Nonlinear 2 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 2: tactic=user,tacticsize=1,budget=60[s],duration=958[ms],qe=236[ms],rcf=0,steps=454
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 4#Benchmarks/Basic/Dynamics: Nonlinear 4 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 4#Benchmarks/Basic/Dynamics: Nonlinear 4 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 4: tactic=user,tacticsize=1,budget=60[s],duration=940[ms],qe=300[ms],rcf=0,steps=452
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 5#Benchmarks/Basic/Dynamics: Nonlinear 5 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear 5#Benchmarks/Basic/Dynamics: Nonlinear 5 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 5: tactic=user,tacticsize=1,budget=60[s],duration=801[ms],qe=205[ms],rcf=0,steps=387
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Riccati#Benchmarks/Basic/Dynamics: Riccati ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Riccati#Benchmarks/Basic/Dynamics: Riccati (proved)
PROVED Benchmarks/Basic/Dynamics: Riccati: tactic=user,tacticsize=1,budget=60[s],duration=901[ms],qe=244[ms],rcf=0,steps=274
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear differential cut#Benchmarks/Basic/Dynamics: Nonlinear differential cut ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Dynamics: Nonlinear differential cut#Benchmarks/Basic/Dynamics: Nonlinear differential cut (timeout)
TIMEOUT Benchmarks/Basic/Dynamics: Nonlinear differential cut: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism (timeout)
TIMEOUT Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 1#Benchmarks/Basic/STTT Tutorial: Example 1 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 1#Benchmarks/Basic/STTT Tutorial: Example 1 (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 1: tactic=user,tacticsize=1,budget=60[s],duration=651[ms],qe=161[ms],rcf=0,steps=220
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 2#Benchmarks/Basic/STTT Tutorial: Example 2 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 2#Benchmarks/Basic/STTT Tutorial: Example 2 (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 2: tactic=user,tacticsize=1,budget=60[s],duration=1255[ms],qe=414[ms],rcf=0,steps=1910
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 3a#Benchmarks/Basic/STTT Tutorial: Example 3a ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 3a#Benchmarks/Basic/STTT Tutorial: Example 3a (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 3a: tactic=user,tacticsize=1,budget=60[s],duration=4753[ms],qe=1971[ms],rcf=0,steps=9171
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4a#Benchmarks/Basic/STTT Tutorial: Example 4a ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4a#Benchmarks/Basic/STTT Tutorial: Example 4a (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4a: tactic=user,tacticsize=1,budget=60[s],duration=1144[ms],qe=356[ms],rcf=0,steps=1889
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4b#Benchmarks/Basic/STTT Tutorial: Example 4b ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4b#Benchmarks/Basic/STTT Tutorial: Example 4b (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4b: tactic=user,tacticsize=1,budget=60[s],duration=1084[ms],qe=317[ms],rcf=0,steps=1740
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4c#Benchmarks/Basic/STTT Tutorial: Example 4c ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 4c#Benchmarks/Basic/STTT Tutorial: Example 4c (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4c: tactic=user,tacticsize=1,budget=60[s],duration=4437[ms],qe=2040[ms],rcf=0,steps=1455
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 5#Benchmarks/Basic/STTT Tutorial: Example 5 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 5#Benchmarks/Basic/STTT Tutorial: Example 5 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 6#Benchmarks/Basic/STTT Tutorial: Example 6 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 6#Benchmarks/Basic/STTT Tutorial: Example 6 (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 6: tactic=user,tacticsize=1,budget=60[s],duration=2781[ms],qe=1461[ms],rcf=0,steps=3834
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 7#Benchmarks/Basic/STTT Tutorial: Example 7 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 7#Benchmarks/Basic/STTT Tutorial: Example 7 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 9a#Benchmarks/Basic/STTT Tutorial: Example 9a ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 9a#Benchmarks/Basic/STTT Tutorial: Example 9a (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 9a: tactic=user,tacticsize=1,budget=60[s],duration=984[ms],qe=305[ms],rcf=0,steps=547
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 9b#Benchmarks/Basic/STTT Tutorial: Example 9b ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 9b#Benchmarks/Basic/STTT Tutorial: Example 9b (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 9b: tactic=user,tacticsize=1,budget=60[s],duration=2912[ms],qe=1295[ms],rcf=0,steps=3352
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 10#Benchmarks/Basic/STTT Tutorial: Example 10 ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/STTT Tutorial: Example 10#Benchmarks/Basic/STTT Tutorial: Example 10 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 10: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward (proved)
PROVED Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward: tactic=user,tacticsize=1,budget=60[s],duration=265[ms],qe=7[ms],rcf=0,steps=174
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 2 Single car drives forward#Benchmarks/Basic/LICS: Example 2 Single car drives forward ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 2 Single car drives forward#Benchmarks/Basic/LICS: Example 2 Single car drives forward (proved)
PROVED Benchmarks/Basic/LICS: Example 2 Single car drives forward: tactic=user,tacticsize=1,budget=60[s],duration=1202[ms],qe=380[ms],rcf=0,steps=1791
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward (proved)
PROVED Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward: tactic=user,tacticsize=1,budget=60[s],duration=1124[ms],qe=363[ms],rcf=0,steps=1843
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car (proved)
PROVED Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car: tactic=user,tacticsize=1,budget=60[s],duration=1860[ms],qe=627[ms],rcf=0,steps=3486
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car (failed)
FAILED Benchmarks/Basic/LICS: Example 4b progress of time-triggered car: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car (proved)
PROVED Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car: tactic=user,tacticsize=1,budget=60[s],duration=2426[ms],qe=849[ms],rcf=0,steps=5003
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence (proved)
PROVED Benchmarks/Basic/LICS: Example 5 Controllability Equivalence: tactic=user,tacticsize=1,budget=60[s],duration=3807[ms],qe=1086[ms],rcf=0,steps=2979
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence (timeout)
TIMEOUT Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car ...
Done /ismail/kyx5/basic.kyx#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car (timeout)
TIMEOUT Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx#Benchmarks/Games/Dual Filibuster Game#Benchmarks/Games/Dual Filibuster Game ...
Done /ismail/kyx5/games.kyx#Benchmarks/Games/Dual Filibuster Game#Benchmarks/Games/Dual Filibuster Game (proved)
PROVED Benchmarks/Games/Dual Filibuster Game: tactic=user,tacticsize=1,budget=60[s],duration=143[ms],qe=34[ms],rcf=0,steps=58
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx#Benchmarks/Games/Push-around cart#Benchmarks/Games/Push-around cart ...
Done /ismail/kyx5/games.kyx#Benchmarks/Games/Push-around cart#Benchmarks/Games/Push-around cart (proved)
PROVED Benchmarks/Games/Push-around cart: tactic=user,tacticsize=1,budget=60[s],duration=1515[ms],qe=480[ms],rcf=0,steps=2020
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx#Benchmarks/Games/Goalie in robot soccer#Benchmarks/Games/Goalie in robot soccer ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/games.kyx#Benchmarks/Games/Goalie in robot soccer#Benchmarks/Games/Goalie in robot soccer (failed)
FAILED Benchmarks/Games/Goalie in robot soccer: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic (proved)
PROVED Benchmarks/Nonlinear/Ahmadi Parrilo Krstic: tactic=user,tacticsize=1,budget=60[s],duration=1230[ms],qe=383[ms],rcf=0,steps=671
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83 (proved)
PROVED Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83: tactic=user,tacticsize=1,budget=60[s],duration=1019[ms],qe=382[ms],rcf=0,steps=523
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79 (proved)
PROVED Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79: tactic=user,tacticsize=1,budget=60[s],duration=1361[ms],qe=474[ms],rcf=0,steps=1033
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet (timeout)
TIMEOUT Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo (proved)
PROVED Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo: tactic=user,tacticsize=1,budget=60[s],duration=1625[ms],qe=626[ms],rcf=0,steps=679
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68 (timeout)
TIMEOUT Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collin Goriely page 60#Benchmarks/Nonlinear/Collin Goriely page 60 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collin Goriely page 60#Benchmarks/Nonlinear/Collin Goriely page 60 (proved)
PROVED Benchmarks/Nonlinear/Collin Goriely page 60: tactic=user,tacticsize=1,budget=60[s],duration=1988[ms],qe=843[ms],rcf=0,steps=956
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2 (timeout)
TIMEOUT Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5 ...
BigInteger out of long range

in _(1)
in <( skip, _(1) )
	(Failed on branch ((((_(1)|dRI(1)))*);_;_))
in <( <( skip, _(1) ) )
	(Failed on branch _)
in <( <( skip, _(1) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:104)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:171)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.DifferentialTactics$.domQuoRem(DifferentialTactics.scala:2382)
	at edu.cmu.cs.ls.keymaerax.btactics.DifferentialTactics$.findDbx(DifferentialTactics.scala:1954)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree15$1(ODEInvariance.scala:1816)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarHomPlus(ODEInvariance.scala:1814)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree18$1(ODEInvariance.scala:1931)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAIclosedPlus$1(ODEInvariance.scala:1931)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 192 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5 (failed)
FAILED Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58 (timeout)
TIMEOUT Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2 (proved)
PROVED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2: tactic=user,tacticsize=1,budget=60[s],duration=2323[ms],qe=903[ms],rcf=0,steps=1502
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11 (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11: tactic=user,tacticsize=1,budget=60[s],duration=1892[ms],qe=726[ms],rcf=0,steps=851
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b: tactic=user,tacticsize=1,budget=60[s],duration=1307[ms],qe=394[ms],rcf=0,steps=578
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i: tactic=user,tacticsize=1,budget=60[s],duration=2224[ms],qe=939[ms],rcf=0,steps=745
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii: tactic=user,tacticsize=1,budget=60[s],duration=1611[ms],qe=561[ms],rcf=0,steps=658
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9 (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9: tactic=user,tacticsize=1,budget=60[s],duration=1437[ms],qe=486[ms],rcf=0,steps=578
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a: tactic=user,tacticsize=1,budget=60[s],duration=1749[ms],qe=740[ms],rcf=0,steps=930
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a: tactic=user,tacticsize=1,budget=60[s],duration=2554[ms],qe=1433[ms],rcf=0,steps=947
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2 (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2: tactic=user,tacticsize=1,budget=60[s],duration=4401[ms],qe=1979[ms],rcf=0,steps=4986
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii: tactic=user,tacticsize=1,budget=60[s],duration=1975[ms],qe=735[ms],rcf=0,steps=989
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2 (timeout)
TIMEOUT Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99 (proved)
PROVED Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99: tactic=user,tacticsize=1,budget=60[s],duration=1898[ms],qe=726[ms],rcf=0,steps=894
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119 (proved)
PROVED Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119: tactic=user,tacticsize=1,budget=60[s],duration=1479[ms],qe=455[ms],rcf=0,steps=574
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hamiltonian System 1#Benchmarks/Nonlinear/Hamiltonian System 1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hamiltonian System 1#Benchmarks/Nonlinear/Hamiltonian System 1 (proved)
PROVED Benchmarks/Nonlinear/Hamiltonian System 1: tactic=user,tacticsize=1,budget=60[s],duration=2239[ms],qe=990[ms],rcf=0,steps=1382
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hybrid Controller Mode 1#Benchmarks/Nonlinear/Hybrid Controller Mode 1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hybrid Controller Mode 1#Benchmarks/Nonlinear/Hybrid Controller Mode 1 (proved)
PROVED Benchmarks/Nonlinear/Hybrid Controller Mode 1: tactic=user,tacticsize=1,budget=60[s],duration=11319[ms],qe=10410[ms],rcf=0,steps=756
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hybrid Controller Mode 2#Benchmarks/Nonlinear/Hybrid Controller Mode 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Hybrid Controller Mode 2#Benchmarks/Nonlinear/Hybrid Controller Mode 2 (proved)
PROVED Benchmarks/Nonlinear/Hybrid Controller Mode 2: tactic=user,tacticsize=1,budget=60[s],duration=15733[ms],qe=14883[ms],rcf=0,steps=758
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 6#Benchmarks/Nonlinear/Invariant Clusters Example 6 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 6#Benchmarks/Nonlinear/Invariant Clusters Example 6 (proved)
PROVED Benchmarks/Nonlinear/Invariant Clusters Example 6: tactic=user,tacticsize=1,budget=60[s],duration=1361[ms],qe=463[ms],rcf=0,steps=733
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 7#Benchmarks/Nonlinear/Invariant Clusters Example 7 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 7#Benchmarks/Nonlinear/Invariant Clusters Example 7 (proved)
PROVED Benchmarks/Nonlinear/Invariant Clusters Example 7: tactic=user,tacticsize=1,budget=60[s],duration=1437[ms],qe=542[ms],rcf=0,steps=785
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Locally stable nonlinear system#Benchmarks/Nonlinear/Locally stable nonlinear system ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Locally stable nonlinear system#Benchmarks/Nonlinear/Locally stable nonlinear system (proved)
PROVED Benchmarks/Nonlinear/Locally stable nonlinear system: tactic=user,tacticsize=1,budget=60[s],duration=1612[ms],qe=543[ms],rcf=0,steps=762
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/MIT astronautics Lyapunov#Benchmarks/Nonlinear/MIT astronautics Lyapunov ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/MIT astronautics Lyapunov#Benchmarks/Nonlinear/MIT astronautics Lyapunov (proved)
PROVED Benchmarks/Nonlinear/MIT astronautics Lyapunov: tactic=user,tacticsize=1,budget=60[s],duration=1516[ms],qe=505[ms],rcf=0,steps=770
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57 (proved)
PROVED Benchmarks/Nonlinear/Man Maccallum Goriely Page 57: tactic=user,tacticsize=1,budget=60[s],duration=1477[ms],qe=476[ms],rcf=0,steps=566
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit Example 3#Benchmarks/Nonlinear/Nonlinear Circuit Example 3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit Example 3#Benchmarks/Nonlinear/Nonlinear Circuit Example 3 (proved)
PROVED Benchmarks/Nonlinear/Nonlinear Circuit Example 3: tactic=user,tacticsize=1,budget=60[s],duration=1898[ms],qe=724[ms],rcf=0,steps=861
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Nonlinear Circuit Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Nonlinear Circuit Example 4 (failed)
FAILED Benchmarks/Nonlinear/Nonlinear Circuit Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator (proved)
PROVED Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator: tactic=user,tacticsize=1,budget=60[s],duration=1495[ms],qe=524[ms],rcf=0,steps=754
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant)#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant)#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant) (proved)
PROVED Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant): tactic=user,tacticsize=1,budget=60[s],duration=1587[ms],qe=513[ms],rcf=0,steps=799
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Stable Limit Cycle 2#Benchmarks/Nonlinear/Stable Limit Cycle 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Stable Limit Cycle 2#Benchmarks/Nonlinear/Stable Limit Cycle 2 (proved)
PROVED Benchmarks/Nonlinear/Stable Limit Cycle 2: tactic=user,tacticsize=1,budget=60[s],duration=1730[ms],qe=497[ms],rcf=0,steps=794
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Example 6_3_2#Benchmarks/Nonlinear/Strogatz Example 6_3_2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Example 6_3_2#Benchmarks/Nonlinear/Strogatz Example 6_3_2 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Example 6_3_2: tactic=user,tacticsize=1,budget=60[s],duration=1609[ms],qe=572[ms],rcf=0,steps=665
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Example 6_8_3#Benchmarks/Nonlinear/Strogatz Example 6_8_3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Example 6_8_3#Benchmarks/Nonlinear/Strogatz Example 6_8_3 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Example 6_8_3: tactic=user,tacticsize=1,budget=60[s],duration=1409[ms],qe=438[ms],rcf=0,steps=569
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 6_1_5: tactic=user,tacticsize=1,budget=60[s],duration=2627[ms],qe=1009[ms],rcf=0,steps=1565
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole: tactic=user,tacticsize=1,budget=60[s],duration=1398[ms],qe=438[ms],rcf=0,steps=566
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System: tactic=user,tacticsize=1,budget=60[s],duration=1918[ms],qe=730[ms],rcf=0,steps=905
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle: tactic=user,tacticsize=1,budget=60[s],duration=2049[ms],qe=706[ms],rcf=0,steps=1029
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Exercise 7_3_5: tactic=user,tacticsize=1,budget=60[s],duration=2276[ms],qe=927[ms],rcf=0,steps=1070
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Unstable Unit Circle 2#Benchmarks/Nonlinear/Unstable Unit Circle 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Unstable Unit Circle 2#Benchmarks/Nonlinear/Unstable Unit Circle 2 (proved)
PROVED Benchmarks/Nonlinear/Unstable Unit Circle 2: tactic=user,tacticsize=1,budget=60[s],duration=1127[ms],qe=432[ms],rcf=0,steps=589
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wien bridge oscillator#Benchmarks/Nonlinear/Wien bridge oscillator ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wien bridge oscillator#Benchmarks/Nonlinear/Wien bridge oscillator (proved)
PROVED Benchmarks/Nonlinear/Wien bridge oscillator: tactic=user,tacticsize=1,budget=60[s],duration=1570[ms],qe=547[ms],rcf=0,steps=730
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wiggins Example 17_1_2#Benchmarks/Nonlinear/Wiggins Example 17_1_2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wiggins Example 17_1_2#Benchmarks/Nonlinear/Wiggins Example 17_1_2 (proved)
PROVED Benchmarks/Nonlinear/Wiggins Example 17_1_2: tactic=user,tacticsize=1,budget=60[s],duration=1429[ms],qe=478[ms],rcf=0,steps=576
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n (proved)
PROVED Benchmarks/Nonlinear/Wiggins Example 18_7_3_n: tactic=user,tacticsize=1,budget=60[s],duration=2638[ms],qe=1079[ms],rcf=0,steps=1416
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C1#Benchmarks/Nonlinear/ZYLZCL Example C1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C1#Benchmarks/Nonlinear/ZYLZCL Example C1 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C1: tactic=user,tacticsize=1,budget=60[s],duration=1538[ms],qe=610[ms],rcf=0,steps=943
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C3#Benchmarks/Nonlinear/ZYLZCL Example C3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C3#Benchmarks/Nonlinear/ZYLZCL Example C3 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C3: tactic=user,tacticsize=1,budget=60[s],duration=1620[ms],qe=552[ms],rcf=0,steps=825
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C4#Benchmarks/Nonlinear/ZYLZCL Example C4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C4#Benchmarks/Nonlinear/ZYLZCL Example C4 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C4: tactic=user,tacticsize=1,budget=60[s],duration=1743[ms],qe=647[ms],rcf=0,steps=871
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C6#Benchmarks/Nonlinear/ZYLZCL Example C6 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C6#Benchmarks/Nonlinear/ZYLZCL Example C6 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C6: tactic=user,tacticsize=1,budget=60[s],duration=1595[ms],qe=610[ms],rcf=0,steps=803
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C7#Benchmarks/Nonlinear/ZYLZCL Example C7 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C7#Benchmarks/Nonlinear/ZYLZCL Example C7 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C8#Benchmarks/Nonlinear/ZYLZCL Example C8 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C8#Benchmarks/Nonlinear/ZYLZCL Example C8 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C8: tactic=user,tacticsize=1,budget=60[s],duration=1465[ms],qe=535[ms],rcf=0,steps=751
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator) (timeout)
TIMEOUT Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (proved)
PROVED Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31: tactic=user,tacticsize=1,budget=60[s],duration=1448[ms],qe=475[ms],rcf=0,steps=799
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (timeout)
TIMEOUT Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3 (proved)
PROVED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3: tactic=user,tacticsize=1,budget=60[s],duration=2019[ms],qe=906[ms],rcf=0,steps=889
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4 (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 ...
BigInteger out of long range

in _(1)
in <( skip, _(1) )
	(Failed on branch ((((_(1)|dRI(1)))*);_;_))
in <( <( skip, _(1) ) )
	(Failed on branch _)
in <( <( skip, _(1) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:203)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:192)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree22$1(ODEInvariance.scala:2375)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2375)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 192 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric) (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2: tactic=user,tacticsize=1,budget=60[s],duration=1865[ms],qe=817[ms],rcf=0,steps=951
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric) (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric): tactic=user,tacticsize=1,budget=60[s],duration=2018[ms],qe=714[ms],rcf=0,steps=817
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3 (proved)
PROVED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3: tactic=user,tacticsize=1,budget=60[s],duration=1397[ms],qe=510[ms],rcf=0,steps=568
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5 (failed)
FAILED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (I)#Benchmarks/Nonlinear/3D Lotka Volterra (I) ...
divide by zero

in _(1)
in <( skip, _(1) )
	(Failed on branch ((((_(1)|dRI(1)))*);_;_))
in <( <( skip, _(1) ) )
	(Failed on branch _)
in <( <( skip, _(1) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: divide by zero
	at cc.redberry.rings.poly.multivar.MultivariateDivision.divideAndRemainder(MultivariateDivision.java:33)
	at cc.redberry.rings.scaladsl.JavaConversions.divideAndRemainder(JavaConversions.java:17)
	at cc.redberry.rings.scaladsl.MultivariateOps.$div$percent$div$percent$times(Ops.scala:210)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:170)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absPolynomialReduce$1(ODEInvariance.scala:976)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$rank$17(ODEInvariance.scala:992)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:992)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:212)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree24$1(ODEInvariance.scala:2426)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2426)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 192 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (I)#Benchmarks/Nonlinear/3D Lotka Volterra (I) (failed)
FAILED Benchmarks/Nonlinear/3D Lotka Volterra (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (II)#Benchmarks/Nonlinear/3D Lotka Volterra (II) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (II)#Benchmarks/Nonlinear/3D Lotka Volterra (II) (failed)
FAILED Benchmarks/Nonlinear/3D Lotka Volterra (II): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (III)#Benchmarks/Nonlinear/3D Lotka Volterra (III) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/3D Lotka Volterra (III)#Benchmarks/Nonlinear/3D Lotka Volterra (III) (failed)
FAILED Benchmarks/Nonlinear/3D Lotka Volterra (III): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143 (proved)
PROVED Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143: tactic=user,tacticsize=1,budget=60[s],duration=1570[ms],qe=553[ms],rcf=0,steps=677
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth)#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth)#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth) (proved)
PROVED Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth): tactic=user,tacticsize=1,budget=60[s],duration=1986[ms],qe=774[ms],rcf=0,steps=1692
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant 3-dim sphere#Benchmarks/Nonlinear/Invariant 3-dim sphere ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant 3-dim sphere#Benchmarks/Nonlinear/Invariant 3-dim sphere (proved)
PROVED Benchmarks/Nonlinear/Invariant 3-dim sphere: tactic=user,tacticsize=1,budget=60[s],duration=1824[ms],qe=624[ms],rcf=0,steps=770
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 4#Benchmarks/Nonlinear/Invariant Clusters Example 4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 4#Benchmarks/Nonlinear/Invariant Clusters Example 4 (proved)
PROVED Benchmarks/Nonlinear/Invariant Clusters Example 4: tactic=user,tacticsize=1,budget=60[s],duration=1313[ms],qe=474[ms],rcf=0,steps=834
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 5#Benchmarks/Nonlinear/Invariant Clusters Example 5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Invariant Clusters Example 5#Benchmarks/Nonlinear/Invariant Clusters Example 5 (proved)
PROVED Benchmarks/Nonlinear/Invariant Clusters Example 5: tactic=user,tacticsize=1,budget=60[s],duration=1341[ms],qe=468[ms],rcf=0,steps=834
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Looping Particle#Benchmarks/Nonlinear/Looping Particle ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Looping Particle#Benchmarks/Nonlinear/Looping Particle (proved)
PROVED Benchmarks/Nonlinear/Looping Particle: tactic=user,tacticsize=1,budget=60[s],duration=2042[ms],qe=660[ms],rcf=0,steps=773
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Shimizu Morioka System#Benchmarks/Nonlinear/Shimizu Morioka System ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Shimizu Morioka System#Benchmarks/Nonlinear/Shimizu Morioka System (proved)
PROVED Benchmarks/Nonlinear/Shimizu Morioka System: tactic=user,tacticsize=1,budget=60[s],duration=1594[ms],qe=403[ms],rcf=0,steps=766
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C2#Benchmarks/Nonlinear/ZYLZCL Example C2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C2#Benchmarks/Nonlinear/ZYLZCL Example C2 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C2: tactic=user,tacticsize=1,budget=60[s],duration=1991[ms],qe=764[ms],rcf=0,steps=1150
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 ...
BigInteger out of long range

in _(1)
in <( skip, _(1) )
	(Failed on branch ((((_(1)|dRI(1)))*);_;_))
in <( <( skip, _(1) ) )
	(Failed on branch _)
in <( <( skip, _(1) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 192 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric) (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric): tactic=user,tacticsize=1,budget=60[s],duration=2207[ms],qe=804[ms],rcf=0,steps=1221
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2: tactic=user,tacticsize=1,budget=60[s],duration=1122[ms],qe=350[ms],rcf=0,steps=559
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4: tactic=user,tacticsize=1,budget=60[s],duration=1469[ms],qe=478[ms],rcf=0,steps=974
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2: tactic=user,tacticsize=1,budget=60[s],duration=2089[ms],qe=926[ms],rcf=0,steps=1748
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3: tactic=user,tacticsize=1,budget=60[s],duration=2514[ms],qe=1108[ms],rcf=0,steps=1832
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7 (failed)
FAILED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric): tactic=user,tacticsize=1,budget=60[s],duration=1927[ms],qe=715[ms],rcf=0,steps=805
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1): tactic=user,tacticsize=1,budget=60[s],duration=1932[ms],qe=632[ms],rcf=0,steps=1073
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33): tactic=user,tacticsize=1,budget=60[s],duration=2202[ms],qe=827[ms],rcf=0,steps=1237
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1): tactic=user,tacticsize=1,budget=60[s],duration=2067[ms],qe=761[ms],rcf=0,steps=1199
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0): tactic=user,tacticsize=1,budget=60[s],duration=1461[ms],qe=487[ms],rcf=0,steps=848
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1) (proved)
PROVED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1): tactic=user,tacticsize=1,budget=60[s],duration=1524[ms],qe=524[ms],rcf=0,steps=879
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Coupled Spring-Mass System (I)#Benchmarks/Nonlinear/Coupled Spring-Mass System (I) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Coupled Spring-Mass System (I)#Benchmarks/Nonlinear/Coupled Spring-Mass System (I) (timeout)
TIMEOUT Benchmarks/Nonlinear/Coupled Spring-Mass System (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Coupled Spring-Mass System (II)#Benchmarks/Nonlinear/Coupled Spring-Mass System (II) ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Coupled Spring-Mass System (II)#Benchmarks/Nonlinear/Coupled Spring-Mass System (II) (failed)
FAILED Benchmarks/Nonlinear/Coupled Spring-Mass System (II): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Damped Mathieu System#Benchmarks/Nonlinear/Damped Mathieu System ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Damped Mathieu System#Benchmarks/Nonlinear/Damped Mathieu System (proved)
PROVED Benchmarks/Nonlinear/Damped Mathieu System: tactic=user,tacticsize=1,budget=60[s],duration=2103[ms],qe=816[ms],rcf=0,steps=1411
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Flight Maneuvers (I)#Benchmarks/Nonlinear/Flight Maneuvers (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Flight Maneuvers (I)#Benchmarks/Nonlinear/Flight Maneuvers (I) (failed)
FAILED Benchmarks/Nonlinear/Flight Maneuvers (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1: tactic=user,tacticsize=1,budget=60[s],duration=1332[ms],qe=479[ms],rcf=0,steps=1021
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum) (timeout)
TIMEOUT Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust) (failed)
FAILED Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust) (failed)
FAILED Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13: tactic=user,tacticsize=1,budget=60[s],duration=2404[ms],qe=1149[ms],rcf=0,steps=1475
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Space Craft: Collision Avoidance#Benchmarks/Nonlinear/Space Craft: Collision Avoidance ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:171)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absPolynomialReduce$1(ODEInvariance.scala:976)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$rank$17(ODEInvariance.scala:992)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:992)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:191)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Space Craft: Collision Avoidance#Benchmarks/Nonlinear/Space Craft: Collision Avoidance (failed)
FAILED Benchmarks/Nonlinear/Space Craft: Collision Avoidance: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6: tactic=user,tacticsize=1,budget=60[s],duration=1842[ms],qe=743[ms],rcf=0,steps=1012
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8 (timeout)
TIMEOUT Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C9#Benchmarks/Nonlinear/ZYLZCL Example C9 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C9#Benchmarks/Nonlinear/ZYLZCL Example C9 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C9: tactic=user,tacticsize=1,budget=60[s],duration=2175[ms],qe=906[ms],rcf=0,steps=2421
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I) (proved)
PROVED Benchmarks/Nonlinear/Collision Avoidance Maneuver (I): tactic=user,tacticsize=1,budget=60[s],duration=3063[ms],qe=1448[ms],rcf=0,steps=3764
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE) (proved)
PROVED Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE): tactic=user,tacticsize=1,budget=60[s],duration=2334[ms],qe=940[ms],rcf=0,steps=2191
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II) (proved)
PROVED Benchmarks/Nonlinear/Collision Avoidance Maneuver (II): tactic=user,tacticsize=1,budget=60[s],duration=2938[ms],qe=1301[ms],rcf=0,steps=3901
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III) (failed)
FAILED Benchmarks/Nonlinear/Collision Avoidance Maneuver (III): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Laub-Loomis#Benchmarks/Nonlinear/Laub-Loomis ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Laub-Loomis#Benchmarks/Nonlinear/Laub-Loomis (timeout)
TIMEOUT Benchmarks/Nonlinear/Laub-Loomis: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Planar 2-body problem#Benchmarks/Nonlinear/Planar 2-body problem ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Planar 2-body problem#Benchmarks/Nonlinear/Planar 2-body problem (failed)
FAILED Benchmarks/Nonlinear/Planar 2-body problem: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C10#Benchmarks/Nonlinear/ZYLZCL Example C10 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ZYLZCL Example C10#Benchmarks/Nonlinear/ZYLZCL Example C10 (proved)
PROVED Benchmarks/Nonlinear/ZYLZCL Example C10: tactic=user,tacticsize=1,budget=60[s],duration=2793[ms],qe=1236[ms],rcf=0,steps=3066
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE) (proved)
PROVED Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE): tactic=user,tacticsize=1,budget=60[s],duration=4723[ms],qe=2033[ms],rcf=0,steps=4684
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE) (timeout)
TIMEOUT Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9 (failed)
FAILED Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3 (failed)
FAILED Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2 (failed)
FAILED Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System (failed)
FAILED Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4 (proved)
PROVED Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4: tactic=user,tacticsize=1,budget=60[s],duration=3036[ms],qe=1367[ms],rcf=0,steps=2084
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7 (proved)
PROVED Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7: tactic=user,tacticsize=1,budget=60[s],duration=4290[ms],qe=2336[ms],rcf=0,steps=3729
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4 ...
User-supplied invariant x2right+yleft>0 not proved; please double-check and adapt invariant.
For example, invariant may hold on some branches but not all: consider using conditional annotations @invariant( (x'=0 -> invA), (x'=2 -> invB) ).
assertProvableSize failed: Expected to have 0 open goals but found an open goal with 1 subgoals:
ElidingProvable(Provable{
   -1:  (2/3+xleft)^2+yleft^2<=1/24	LessEqual
   -2:  -1.1<=x1right	LessEqual
   -3:  x1right<=-0.7	LessEqual
   -4:  0.5<=x2right	LessEqual
   -5:  x2right<=0.9	LessEqual
==> 1:  [{xleft'=-2*yleft,yleft'=-2*xleft-3*xleft^2,x1right'=-x2right^3,x2right'=x1right-x1right^3&true&true}]x2right+yleft>0	Box
  from
   -1:  (2/3+xleft)^2+yleft^2<=1/24	LessEqual
   -2:  -1.1<=x1right	LessEqual
   -3:  x1right<=-0.7	LessEqual
   -4:  0.5<=x2right	LessEqual
   -5:  x2right<=0.9	LessEqual
==> 1:  [{xleft'=-2*yleft,yleft'=-2*xleft-3*xleft^2,x1right'=-x2right^3,x2right'=x1right-x1right^3&true&true}]x2right+yleft>0	Box})

in <( skip, >>_<< )
	(Failed on branch ((((_(1)|dRI(1)))*);_;_))
in <( <( skip, >>_<< ) )
	(Failed on branch _)
in <( <( skip, >>_<< ) )
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.$anonfun$ODEImpl$8(TactixLibrary.scala:739)
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$10.result(MiscTactics.scala:229)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4 (failed)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
FAILED Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1 (proved)
PROVED Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1: tactic=user,tacticsize=1,budget=60[s],duration=2357[ms],qe=981[ms],rcf=0,steps=1590
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I)#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I)#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I) (failed)
FAILED Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5 (failed)
FAILED Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4 (failed)
FAILED Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2 (failed)
FAILED Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere (failed)
FAILED Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4 ...
Done /ismail/kyx5/nonlinear.kyx#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4 (proved)
PROVED Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4: tactic=user,tacticsize=1,budget=60[s],duration=2690[ms],qe=1058[ms],rcf=0,steps=1893
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Essentials#Benchmarks/Advanced/ETCS: Essentials ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Essentials#Benchmarks/Advanced/ETCS: Essentials (proved)
PROVED Benchmarks/Advanced/ETCS: Essentials: tactic=user,tacticsize=1,budget=300[s],duration=258059[ms],qe=250460[ms],rcf=0,steps=14093
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability)#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability) ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability)#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability) (proved)
PROVED Benchmarks/Advanced/ETCS: Proposition 1 (Controllability): tactic=user,tacticsize=1,budget=300[s],duration=7689[ms],qe=3353[ms],rcf=0,steps=3687
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity)#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity) ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity)#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity) (timeout)
TIMEOUT Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity): tactic=user,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver (proved)
PROVED Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver: tactic=user,tacticsize=1,budget=300[s],duration=2667[ms],qe=890[ms],rcf=0,steps=2732
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver (proved)
PROVED Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver: tactic=user,tacticsize=1,budget=300[s],duration=6192[ms],qe=2069[ms],rcf=0,steps=6513
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver (proved)
PROVED Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver: tactic=user,tacticsize=1,budget=300[s],duration=131111[ms],qe=123178[ms],rcf=0,steps=11558
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety (failed)
FAILED Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety: tactic=user,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/advanced.kyx#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety (failed)
FAILED Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety: tactic=user,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear2.kyx#Benchmarks/Nonlinear/Robertson Chemical Reaction#Benchmarks/Nonlinear/Robertson Chemical Reaction ...
Done /ismail/kyx5/nonlinear2.kyx#Benchmarks/Nonlinear/Robertson Chemical Reaction#Benchmarks/Nonlinear/Robertson Chemical Reaction (proved)
PROVED Benchmarks/Nonlinear/Robertson Chemical Reaction: tactic=user,tacticsize=1,budget=60[s],duration=997[ms],qe=277[ms],rcf=0,steps=574
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear2.kyx#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance)#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance) ...
Name conversion of exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >> not supported

in _QE
in <( _QE, (derive('Rlast.1);DE('Rlast);TryCatch;DW('Rlast);GV('Rlast);_;((_('Rlast);QE)|nil);label("//dI Step")) )
	(Failed on branch (_;((_('Rlast);QE)|nil);label("//dI Init")))
in <( (DW(1);G(1);implyR(1);andL(-1);hideL(-1);QE), <( _QE, (derive('Rlast.1);DE('Rlast);TryCatch;DW('Rlast);GV('Rlast);_;((_('Rlast);QE)|nil);label("//dI Step")) ) )
	(Failed on branch _(1))
in <( <( (DW(1);G(1);implyR(1);andL(-1);hideL(-1);QE), <( _QE, (derive('Rlast.1);DE('Rlast);TryCatch;DW('Rlast);GV('Rlast);_;((_('Rlast);QE)|nil);label("//dI Step")) ) ), _(1) )
	(Failed on branch (DW(1);G(1);implyR(1);implyR(1);andL(-1);hideL(-2);dC("t_>s_", 1);<( (DW(1);G(1);implyR(1);andL(-1);hideL(-1);QE), _(1) )))
in <( _('Rlast), <( <( (DW(1);G(1);implyR(1);andL(-1);hideL(-1);QE), <( _QE, (derive('Rlast.1);DE('Rlast);TryCatch;DW('Rlast);GV('Rlast);_;((_('Rlast);QE)|nil);label("//dI Step")) ) ), _(1) ) )
	(Failed on branch (cohideOnlyR('Rlast);cohideOnlyL('Llast);dC("t_>=s_", 1);<( (DW(1);G(1);implyR(1);i...
in <( <( <( (cohideR(1);QE), <( <( _('Rlast), <( <( (DW(1);G(1);implyR(1);andL(-1);hideL(-1);QE), <( _QE, (derive('Rlast.1);DE('Rlast);TryCatch;DW('Rlast);GV('Rlast);_;((_('Rlast);QE)|nil);label("//dI Step")) ) ), _(1) ) ), (DW('Rlast);box('Rlast);notR('Rlast);cutL("\exists fv__3 \exists fv__2 \exists fv__1 <{t_'=1,x'=3*x-3*x*y,y'=1*x*y-1*y&true&(exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >>(-1*x-3*y)*x^1*y^3=K_0|t_=s_)}>((t_=fv__1&x=fv__2&y=fv__3)&!(true&(exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >>(-1*fv__2-3*fv__3)*fv__2^1*fv__3^3=K_0|fv__1=s_)->fv__1=s_->exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >>(-1*fv__2-3*fv__3)*fv__2^1*fv__3^3=K_0))", 'Llast);<( (((existsL('Llast))*3);pVd('Llast);andL('Llast);notL('Llast);_('Llast);cutL("<{fv__1'=-1,fv__2'=-(3*fv__2-3*fv__2*fv__3),fv__3'=-(1*fv__2*fv__3-1*fv__3)&true&(exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >>(-1*fv_...
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:508)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: Name conversion of exp<< <{exp:=._0;t:=._1;}{{exp'=-exp,t'=-1}++{exp'=exp,t'=1}}>(exp=1&t=0) >> not supported
in 
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.nameIdentifier(SMTConverter.scala:107)
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.$anonfun$generateSMT$1(SMTConverter.scala:70)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.generateSMT(SMTConverter.scala:70)
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.generateAssertNegation(SMTConverter.scala:61)
	at edu.cmu.cs.ls.keymaerax.tools.qe.SMTConverter.apply(SMTConverter.scala:32)
	at edu.cmu.cs.ls.keymaerax.tools.qe.Z3Solver.qe(Z3Solver.scala:47)
	at edu.cmu.cs.ls.keymaerax.tools.qe.Z3QETool.quantifierElimination(Z3QETool.scala:54)
	at edu.cmu.cs.ls.keymaerax.core.Provable$.proveArithmetic(Proof.scala:698)
	at edu.cmu.cs.ls.keymaerax.pt.ElidingProvable$.proveArithmetic(TermProvable.scala:513)
	at edu.cmu.cs.ls.keymaerax.pt.ElidingProvable$.proveArithmeticLemma(TermProvable.scala:516)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig$.proveArithmeticLemma(TermProvable.scala:435)
	at edu.cmu.cs.ls.keymaerax.tools.ext.Z3.qe(Z3.scala:60)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$rcf$3(ToolTactics.scala:643)
	at scala.Option.map(Option.scala:242)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$rcf$1(ToolTactics.scala:628)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$53.result(MiscTactics.scala:881)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:607)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:604)
	at scala.Function1.$anonfun$andThen$1(Function1.scala:87)
	at edu.cmu.cs.ls.keymaerax.btactics.Idioms$$anon$17.result(MiscTactics.scala:486)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:607)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.apply(BellerophonSyntax.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.Idioms$.$anonfun$or$1(MiscTactics.scala:373)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig.apply(TermProvable.scala:154)
	at edu.cmu.cs.ls.keymaerax.pt.ProvableSig.apply$(TermProvable.scala:153)
	at edu.cmu.cs.ls.keymaerax.pt.ElidingProvable.apply(TermProvable.scala:443)
	at edu.cmu.cs.ls.keymaerax.btactics.ToolTactics$.$anonfun$prepareQE$1(ToolTactics.scala:206)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$53.result(MiscTactics.scala:881)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$57(SequentialInterpreter.scala:651)
	at scala.util.Try$.apply(Try.scala:217)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:651)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.$anonfun$remember$2(AnonymousLemmas.scala:54)
	at scala.Option.getOrElse(Option.scala:201)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.remember(AnonymousLemmas.scala:54)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.$anonfun$cacheTacticResult$2(AnonymousLemmas.scala:30)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.$anonfun$cacheTacticResult$2$adapted(AnonymousLemmas.scala:30)
	at scala.collection.immutable.Range.map(Range.scala:59)
	at edu.cmu.cs.ls.keymaerax.btactics.AnonymousLemmas$.$anonfun$cacheTacticResult$1(AnonymousLemmas.scala:30)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$53.result(MiscTactics.scala:881)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	... 354 more
Done /ismail/kyx5/nonlinear2.kyx#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance)#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance) (failed)
FAILED Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 1#Benchmarks/Basic/Static semantics correctness: Assignment 1 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 1#Benchmarks/Basic/Static semantics correctness: Assignment 1 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 1: tactic=user,tacticsize=1,budget=60[s],duration=66[ms],qe=42[ms],rcf=0,steps=38
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 2#Benchmarks/Basic/Static semantics correctness: Assignment 2 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 2#Benchmarks/Basic/Static semantics correctness: Assignment 2 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 2: tactic=user,tacticsize=1,budget=60[s],duration=140[ms],qe=69[ms],rcf=0,steps=114
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 3#Benchmarks/Basic/Static semantics correctness: Assignment 3 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 3#Benchmarks/Basic/Static semantics correctness: Assignment 3 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 3: tactic=user,tacticsize=1,budget=60[s],duration=216[ms],qe=71[ms],rcf=0,steps=154
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 4#Benchmarks/Basic/Static semantics correctness: Assignment 4 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 4#Benchmarks/Basic/Static semantics correctness: Assignment 4 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 4: tactic=user,tacticsize=1,budget=60[s],duration=741[ms],qe=116[ms],rcf=0,steps=576
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 5#Benchmarks/Basic/Static semantics correctness: Assignment 5 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 5#Benchmarks/Basic/Static semantics correctness: Assignment 5 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 5: tactic=user,tacticsize=1,budget=60[s],duration=56[ms],qe=0[ms],rcf=0,steps=33
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 6
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 6#Benchmarks/Basic/Static semantics correctness: Assignment 6 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 6#Benchmarks/Basic/Static semantics correctness: Assignment 6 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 6: tactic=user,tacticsize=1,budget=60[s],duration=128[ms],qe=76[ms],rcf=0,steps=134
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 7
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 7#Benchmarks/Basic/Static semantics correctness: Assignment 7 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 7#Benchmarks/Basic/Static semantics correctness: Assignment 7 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 7: tactic=user,tacticsize=1,budget=60[s],duration=887[ms],qe=171[ms],rcf=0,steps=753
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 8
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 8#Benchmarks/Basic/Static semantics correctness: Assignment 8 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 8#Benchmarks/Basic/Static semantics correctness: Assignment 8 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 8: tactic=user,tacticsize=1,budget=60[s],duration=1458[ms],qe=417[ms],rcf=0,steps=925
kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 9
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 9#Benchmarks/Basic/Static semantics correctness: Assignment 9 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Static semantics correctness: Assignment 9#Benchmarks/Basic/Static semantics correctness: Assignment 9 (proved)
PROVED Benchmarks/Basic/Static semantics correctness: Assignment 9: tactic=user,tacticsize=1,budget=60[s],duration=1249[ms],qe=393[ms],rcf=0,steps=492
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Cascaded
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Cascaded#Benchmarks/Basic/Dynamics: Cascaded ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Cascaded#Benchmarks/Basic/Dynamics: Cascaded (proved)
PROVED Benchmarks/Basic/Dynamics: Cascaded: tactic=user,tacticsize=1,budget=60[s],duration=1771[ms],qe=641[ms],rcf=0,steps=1356
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Single integrator time
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Single integrator time#Benchmarks/Basic/Dynamics: Single integrator time ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Single integrator time#Benchmarks/Basic/Dynamics: Single integrator time (proved)
PROVED Benchmarks/Basic/Dynamics: Single integrator time: tactic=user,tacticsize=1,budget=60[s],duration=627[ms],qe=165[ms],rcf=0,steps=164
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Single integrator
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Single integrator#Benchmarks/Basic/Dynamics: Single integrator ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Single integrator#Benchmarks/Basic/Dynamics: Single integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Single integrator: tactic=user,tacticsize=1,budget=60[s],duration=576[ms],qe=89[ms],rcf=0,steps=152
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Double integrator
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Double integrator#Benchmarks/Basic/Dynamics: Double integrator ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Double integrator#Benchmarks/Basic/Dynamics: Double integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Double integrator: tactic=user,tacticsize=1,budget=60[s],duration=4426[ms],qe=1760[ms],rcf=0,steps=1325
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Triple integrator
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Triple integrator#Benchmarks/Basic/Dynamics: Triple integrator ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Triple integrator#Benchmarks/Basic/Dynamics: Triple integrator (proved)
PROVED Benchmarks/Basic/Dynamics: Triple integrator: tactic=user,tacticsize=1,budget=60[s],duration=5699[ms],qe=2535[ms],rcf=0,steps=878
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (1)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (1)#Benchmarks/Basic/Dynamics: Exponential decay (1) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (1)#Benchmarks/Basic/Dynamics: Exponential decay (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (1): tactic=user,tacticsize=1,budget=60[s],duration=690[ms],qe=207[ms],rcf=0,steps=144
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (2)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (2)#Benchmarks/Basic/Dynamics: Exponential decay (2) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (2)#Benchmarks/Basic/Dynamics: Exponential decay (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (2): tactic=user,tacticsize=1,budget=60[s],duration=720[ms],qe=213[ms],rcf=0,steps=144
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (3)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (3)#Benchmarks/Basic/Dynamics: Exponential decay (3) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential decay (3)#Benchmarks/Basic/Dynamics: Exponential decay (3) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential decay (3): tactic=user,tacticsize=1,budget=60[s],duration=773[ms],qe=233[ms],rcf=0,steps=199
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (1)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (1)#Benchmarks/Basic/Dynamics: Exponential growth (1) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (1)#Benchmarks/Basic/Dynamics: Exponential growth (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (1): tactic=user,tacticsize=1,budget=60[s],duration=625[ms],qe=134[ms],rcf=0,steps=194
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (2)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (2)#Benchmarks/Basic/Dynamics: Exponential growth (2) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (2)#Benchmarks/Basic/Dynamics: Exponential growth (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (2): tactic=user,tacticsize=1,budget=60[s],duration=3867[ms],qe=1699[ms],rcf=0,steps=389
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (4)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (4)#Benchmarks/Basic/Dynamics: Exponential growth (4) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (4)#Benchmarks/Basic/Dynamics: Exponential growth (4) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (4): tactic=user,tacticsize=1,budget=60[s],duration=1015[ms],qe=290[ms],rcf=0,steps=639
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (5)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (5)#Benchmarks/Basic/Dynamics: Exponential growth (5) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Exponential growth (5)#Benchmarks/Basic/Dynamics: Exponential growth (5) (proved)
PROVED Benchmarks/Basic/Dynamics: Exponential growth (5): tactic=user,tacticsize=1,budget=60[s],duration=878[ms],qe=295[ms],rcf=0,steps=333
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (1)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (1)#Benchmarks/Basic/Dynamics: Rotational dynamics (1) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (1)#Benchmarks/Basic/Dynamics: Rotational dynamics (1) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (1): tactic=user,tacticsize=1,budget=60[s],duration=899[ms],qe=238[ms],rcf=0,steps=417
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (2)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (2)#Benchmarks/Basic/Dynamics: Rotational dynamics (2) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (2)#Benchmarks/Basic/Dynamics: Rotational dynamics (2) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (2): tactic=user,tacticsize=1,budget=60[s],duration=5336[ms],qe=1766[ms],rcf=0,steps=2075
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (3)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (3)#Benchmarks/Basic/Dynamics: Rotational dynamics (3) ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Rotational dynamics (3)#Benchmarks/Basic/Dynamics: Rotational dynamics (3) (proved)
PROVED Benchmarks/Basic/Dynamics: Rotational dynamics (3): tactic=user,tacticsize=1,budget=60[s],duration=1622[ms],qe=583[ms],rcf=0,steps=1345
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Spiral to equilibrium
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Spiral to equilibrium#Benchmarks/Basic/Dynamics: Spiral to equilibrium ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Spiral to equilibrium#Benchmarks/Basic/Dynamics: Spiral to equilibrium (proved)
PROVED Benchmarks/Basic/Dynamics: Spiral to equilibrium: tactic=user,tacticsize=1,budget=60[s],duration=1000[ms],qe=291[ms],rcf=0,steps=514
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Open cases
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Open cases#Benchmarks/Basic/Dynamics: Open cases ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Open cases#Benchmarks/Basic/Dynamics: Open cases (proved)
PROVED Benchmarks/Basic/Dynamics: Open cases: tactic=user,tacticsize=1,budget=60[s],duration=1330[ms],qe=565[ms],rcf=0,steps=480
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Closed cases
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Closed cases#Benchmarks/Basic/Dynamics: Closed cases ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Closed cases#Benchmarks/Basic/Dynamics: Closed cases (proved)
PROVED Benchmarks/Basic/Dynamics: Closed cases: tactic=user,tacticsize=1,budget=60[s],duration=816[ms],qe=203[ms],rcf=0,steps=604
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Conserved quantity
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Conserved quantity#Benchmarks/Basic/Dynamics: Conserved quantity ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Conserved quantity#Benchmarks/Basic/Dynamics: Conserved quantity (proved)
PROVED Benchmarks/Basic/Dynamics: Conserved quantity: tactic=user,tacticsize=1,budget=60[s],duration=3470[ms],qe=2718[ms],rcf=0,steps=513
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Darboux equality
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Darboux equality#Benchmarks/Basic/Dynamics: Darboux equality ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Darboux equality#Benchmarks/Basic/Dynamics: Darboux equality (proved)
PROVED Benchmarks/Basic/Dynamics: Darboux equality: tactic=user,tacticsize=1,budget=60[s],duration=872[ms],qe=254[ms],rcf=0,steps=506
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Fractional Darboux equality
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Fractional Darboux equality#Benchmarks/Basic/Dynamics: Fractional Darboux equality ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Fractional Darboux equality#Benchmarks/Basic/Dynamics: Fractional Darboux equality (failed)
FAILED Benchmarks/Basic/Dynamics: Fractional Darboux equality: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Darboux inequality
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Darboux inequality#Benchmarks/Basic/Dynamics: Darboux inequality ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Darboux inequality#Benchmarks/Basic/Dynamics: Darboux inequality (failed)
FAILED Benchmarks/Basic/Dynamics: Darboux inequality: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Bifurcation
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Bifurcation#Benchmarks/Basic/Dynamics: Bifurcation ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Bifurcation#Benchmarks/Basic/Dynamics: Bifurcation (failed)
FAILED Benchmarks/Basic/Dynamics: Bifurcation: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators#Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators (proved)
PROVED Benchmarks/Basic/Dynamics: Parametric switching between two different damped oscillators: tactic=user,tacticsize=1,budget=60[s],duration=5894[ms],qe=3130[ms],rcf=0,steps=2961
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 1#Benchmarks/Basic/Dynamics: Nonlinear 1 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 1#Benchmarks/Basic/Dynamics: Nonlinear 1 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 1: tactic=user,tacticsize=1,budget=60[s],duration=895[ms],qe=262[ms],rcf=0,steps=423
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 2#Benchmarks/Basic/Dynamics: Nonlinear 2 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 2#Benchmarks/Basic/Dynamics: Nonlinear 2 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 2: tactic=user,tacticsize=1,budget=60[s],duration=973[ms],qe=243[ms],rcf=0,steps=454
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 4#Benchmarks/Basic/Dynamics: Nonlinear 4 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 4#Benchmarks/Basic/Dynamics: Nonlinear 4 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 4: tactic=user,tacticsize=1,budget=60[s],duration=898[ms],qe=284[ms],rcf=0,steps=452
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 5#Benchmarks/Basic/Dynamics: Nonlinear 5 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear 5#Benchmarks/Basic/Dynamics: Nonlinear 5 (proved)
PROVED Benchmarks/Basic/Dynamics: Nonlinear 5: tactic=user,tacticsize=1,budget=60[s],duration=773[ms],qe=209[ms],rcf=0,steps=387
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Riccati
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Riccati#Benchmarks/Basic/Dynamics: Riccati ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Riccati#Benchmarks/Basic/Dynamics: Riccati (proved)
PROVED Benchmarks/Basic/Dynamics: Riccati: tactic=user,tacticsize=1,budget=60[s],duration=946[ms],qe=244[ms],rcf=0,steps=274
kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear differential cut
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear differential cut#Benchmarks/Basic/Dynamics: Nonlinear differential cut ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Dynamics: Nonlinear differential cut#Benchmarks/Basic/Dynamics: Nonlinear differential cut (timeout)
TIMEOUT Benchmarks/Basic/Dynamics: Nonlinear differential cut: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism#Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism (failed)
FAILED Benchmarks/Basic/Affine: Overdamped Door Closing Mechanism: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 1#Benchmarks/Basic/STTT Tutorial: Example 1 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 1#Benchmarks/Basic/STTT Tutorial: Example 1 (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 1: tactic=user,tacticsize=1,budget=60[s],duration=643[ms],qe=152[ms],rcf=0,steps=220
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 2#Benchmarks/Basic/STTT Tutorial: Example 2 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 2#Benchmarks/Basic/STTT Tutorial: Example 2 (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 2: tactic=user,tacticsize=1,budget=60[s],duration=1273[ms],qe=407[ms],rcf=0,steps=1910
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 3a
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 3a#Benchmarks/Basic/STTT Tutorial: Example 3a ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 3a#Benchmarks/Basic/STTT Tutorial: Example 3a (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 3a: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4a
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4a#Benchmarks/Basic/STTT Tutorial: Example 4a ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4a#Benchmarks/Basic/STTT Tutorial: Example 4a (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4a: tactic=user,tacticsize=1,budget=60[s],duration=1186[ms],qe=366[ms],rcf=0,steps=1889
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4b
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4b#Benchmarks/Basic/STTT Tutorial: Example 4b ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4b#Benchmarks/Basic/STTT Tutorial: Example 4b (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4b: tactic=user,tacticsize=1,budget=60[s],duration=1091[ms],qe=306[ms],rcf=0,steps=1740
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4c
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4c#Benchmarks/Basic/STTT Tutorial: Example 4c ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 4c#Benchmarks/Basic/STTT Tutorial: Example 4c (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 4c: tactic=user,tacticsize=1,budget=60[s],duration=4486[ms],qe=2017[ms],rcf=0,steps=1455
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 5#Benchmarks/Basic/STTT Tutorial: Example 5 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 5#Benchmarks/Basic/STTT Tutorial: Example 5 (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 5: tactic=user,tacticsize=1,budget=60[s],duration=2387[ms],qe=953[ms],rcf=0,steps=3725
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 6
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 6#Benchmarks/Basic/STTT Tutorial: Example 6 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 6#Benchmarks/Basic/STTT Tutorial: Example 6 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 6: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 7
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 7#Benchmarks/Basic/STTT Tutorial: Example 7 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 7#Benchmarks/Basic/STTT Tutorial: Example 7 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 9a
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 9a#Benchmarks/Basic/STTT Tutorial: Example 9a ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 9a#Benchmarks/Basic/STTT Tutorial: Example 9a (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 9a: tactic=user,tacticsize=1,budget=60[s],duration=1030[ms],qe=347[ms],rcf=0,steps=547
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 9b
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 9b#Benchmarks/Basic/STTT Tutorial: Example 9b ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 9b#Benchmarks/Basic/STTT Tutorial: Example 9b (proved)
PROVED Benchmarks/Basic/STTT Tutorial: Example 9b: tactic=user,tacticsize=1,budget=60[s],duration=19432[ms],qe=6307[ms],rcf=0,steps=5022
kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 10
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 10#Benchmarks/Basic/STTT Tutorial: Example 10 ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/STTT Tutorial: Example 10#Benchmarks/Basic/STTT Tutorial: Example 10 (timeout)
TIMEOUT Benchmarks/Basic/STTT Tutorial: Example 10: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward#Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward (proved)
PROVED Benchmarks/Basic/LICS: Example 1 Continuous car accelerates forward: tactic=user,tacticsize=1,budget=60[s],duration=279[ms],qe=8[ms],rcf=0,steps=174
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 2 Single car drives forward
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 2 Single car drives forward#Benchmarks/Basic/LICS: Example 2 Single car drives forward ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 2 Single car drives forward#Benchmarks/Basic/LICS: Example 2 Single car drives forward (proved)
PROVED Benchmarks/Basic/LICS: Example 2 Single car drives forward: tactic=user,tacticsize=1,budget=60[s],duration=1227[ms],qe=374[ms],rcf=0,steps=1791
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward#Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward (proved)
PROVED Benchmarks/Basic/LICS: Example 3a event-triggered car drives forward: tactic=user,tacticsize=1,budget=60[s],duration=1145[ms],qe=347[ms],rcf=0,steps=1843
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car#Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car (proved)
PROVED Benchmarks/Basic/LICS: Example 4a safe stopping of time-triggered car: tactic=user,tacticsize=1,budget=60[s],duration=2106[ms],qe=702[ms],rcf=0,steps=3486
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car#Benchmarks/Basic/LICS: Example 4b progress of time-triggered car (failed)
FAILED Benchmarks/Basic/LICS: Example 4b progress of time-triggered car: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car#Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car (proved)
PROVED Benchmarks/Basic/LICS: Example 4c relative safety of time-triggered car: tactic=user,tacticsize=1,budget=60[s],duration=4174[ms],qe=1650[ms],rcf=0,steps=9402
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence#Benchmarks/Basic/LICS: Example 5 Controllability Equivalence (proved)
PROVED Benchmarks/Basic/LICS: Example 5 Controllability Equivalence: tactic=user,tacticsize=1,budget=60[s],duration=3903[ms],qe=1116[ms],rcf=0,steps=2979
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence#Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence (timeout)
TIMEOUT Benchmarks/Basic/LICS: Example 6 MPC Acceleration Equivalence: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car ...
Done /ismail/kyx5/basic.kyx.stripped#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car#Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car (timeout)
TIMEOUT Benchmarks/Basic/LICS: Example 7 Model-Predictive Control Design Car: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/games.kyx.stripped#Benchmarks/Games/Dual Filibuster Game
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx.stripped#Benchmarks/Games/Dual Filibuster Game#Benchmarks/Games/Dual Filibuster Game ...
Done /ismail/kyx5/games.kyx.stripped#Benchmarks/Games/Dual Filibuster Game#Benchmarks/Games/Dual Filibuster Game (proved)
PROVED Benchmarks/Games/Dual Filibuster Game: tactic=user,tacticsize=1,budget=60[s],duration=164[ms],qe=25[ms],rcf=0,steps=58
kyx5/games.kyx.stripped#Benchmarks/Games/Push-around cart
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx.stripped#Benchmarks/Games/Push-around cart#Benchmarks/Games/Push-around cart ...
Done /ismail/kyx5/games.kyx.stripped#Benchmarks/Games/Push-around cart#Benchmarks/Games/Push-around cart (proved)
PROVED Benchmarks/Games/Push-around cart: tactic=user,tacticsize=1,budget=60[s],duration=2249[ms],qe=792[ms],rcf=0,steps=2020
kyx5/games.kyx.stripped#Benchmarks/Games/Goalie in robot soccer
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/games.kyx.stripped#Benchmarks/Games/Goalie in robot soccer#Benchmarks/Games/Goalie in robot soccer ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/games.kyx.stripped#Benchmarks/Games/Goalie in robot soccer#Benchmarks/Games/Goalie in robot soccer (failed)
FAILED Benchmarks/Games/Goalie in robot soccer: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic#Benchmarks/Nonlinear/Ahmadi Parrilo Krstic (proved)
PROVED Benchmarks/Nonlinear/Ahmadi Parrilo Krstic: tactic=user,tacticsize=1,budget=60[s],duration=5512[ms],qe=2396[ms],rcf=0,steps=459
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83 (failed)
FAILED Benchmarks/Nonlinear/Arrowsmith Place Fig_3_11 page 83: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79#Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79 (failed)
FAILED Benchmarks/Nonlinear/Arrowsmith Place Fig_3_5e page 79: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet#Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet (failed)
FAILED Benchmarks/Nonlinear/Ben Sassi Girard 20104 Moore-Greitzer Jet: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo#Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo (failed)
FAILED Benchmarks/Nonlinear/Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68#Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68 (failed)
FAILED Benchmarks/Nonlinear/Bhatia Szego Ex_2_4 page 68: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collin Goriely page 60
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collin Goriely page 60#Benchmarks/Nonlinear/Collin Goriely page 60 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collin Goriely page 60#Benchmarks/Nonlinear/Collin Goriely page 60 (failed)
FAILED Benchmarks/Nonlinear/Collin Goriely page 60: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2 (failed)
FAILED Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5#Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5 (failed)
FAILED Benchmarks/Nonlinear/Dai Gan Xia Zhan JSC14 Ex. 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58#Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58 (failed)
FAILED Benchmarks/Nonlinear/Darboux Christoffel Int Goriely page 58: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2 (failed)
FAILED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017 Ex. 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11 (failed)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
FAILED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b (failed)
FAILED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_11b: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i (timeout)
TIMEOUT Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_i: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii (timeout)
TIMEOUT Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_15_ii: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9 (failed)
FAILED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 10_9: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a (failed)
FAILED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_11a: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 1_9a: tactic=user,tacticsize=1,budget=60[s],duration=5955[ms],qe=3208[ms],rcf=0,steps=600
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2 (failed)
FAILED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii#Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii (proved)
PROVED Benchmarks/Nonlinear/Dumortier Llibre Artes Ex. 5_2_ii: tactic=user,tacticsize=1,budget=60[s],duration=7450[ms],qe=3729[ms],rcf=0,steps=740
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2 (failed)
FAILED Benchmarks/Nonlinear/Fitzhugh Nagumo Ben Sassi Girard 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99#Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99 (failed)
FAILED Benchmarks/Nonlinear/Forsman Phd Ex 6_1 page 99: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119#Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119 (failed)
FAILED Benchmarks/Nonlinear/Forsman Phd Ex 6_14 page 119: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hamiltonian System 1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hamiltonian System 1#Benchmarks/Nonlinear/Hamiltonian System 1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hamiltonian System 1#Benchmarks/Nonlinear/Hamiltonian System 1 (failed)
FAILED Benchmarks/Nonlinear/Hamiltonian System 1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hybrid Controller Mode 1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hybrid Controller Mode 1#Benchmarks/Nonlinear/Hybrid Controller Mode 1 ...
BigInteger out of long range

in _(1)
in <( skip, _(1) )
	(Failed on branch (_(1);done()))
in <( <( skip, _(1) ) )
	(Failed on branch _)
in <( <( skip, _(1) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:947)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:171)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.DifferentialTactics$.domQuoRem(DifferentialTactics.scala:2382)
	at edu.cmu.cs.ls.keymaerax.btactics.DifferentialTactics$.findDbx(DifferentialTactics.scala:1954)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree15$1(ODEInvariance.scala:1816)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarHomPlus(ODEInvariance.scala:1814)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree18$1(ODEInvariance.scala:1931)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAIclosedPlus$1(ODEInvariance.scala:1931)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 241 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hybrid Controller Mode 1#Benchmarks/Nonlinear/Hybrid Controller Mode 1 (failed)
FAILED Benchmarks/Nonlinear/Hybrid Controller Mode 1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hybrid Controller Mode 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hybrid Controller Mode 2#Benchmarks/Nonlinear/Hybrid Controller Mode 2 ...
BigInteger out of long range

in _(1)
in <( skip, _(1) )
	(Failed on branch (_(1);done()))
in <( <( skip, _(1) ) )
	(Failed on branch _)
in <( <( skip, _(1) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:947)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:171)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.DifferentialTactics$.domQuoRem(DifferentialTactics.scala:2382)
	at edu.cmu.cs.ls.keymaerax.btactics.DifferentialTactics$.findDbx(DifferentialTactics.scala:1954)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree15$1(ODEInvariance.scala:1816)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarHomPlus(ODEInvariance.scala:1814)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree18$1(ODEInvariance.scala:1931)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAIclosedPlus$1(ODEInvariance.scala:1931)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 241 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Hybrid Controller Mode 2#Benchmarks/Nonlinear/Hybrid Controller Mode 2 (failed)
FAILED Benchmarks/Nonlinear/Hybrid Controller Mode 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 6
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 6#Benchmarks/Nonlinear/Invariant Clusters Example 6 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 6#Benchmarks/Nonlinear/Invariant Clusters Example 6 (failed)
FAILED Benchmarks/Nonlinear/Invariant Clusters Example 6: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 7
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 7#Benchmarks/Nonlinear/Invariant Clusters Example 7 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 7#Benchmarks/Nonlinear/Invariant Clusters Example 7 (failed)
FAILED Benchmarks/Nonlinear/Invariant Clusters Example 7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Locally stable nonlinear system
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Locally stable nonlinear system#Benchmarks/Nonlinear/Locally stable nonlinear system ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Locally stable nonlinear system#Benchmarks/Nonlinear/Locally stable nonlinear system (failed)
FAILED Benchmarks/Nonlinear/Locally stable nonlinear system: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/MIT astronautics Lyapunov
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/MIT astronautics Lyapunov#Benchmarks/Nonlinear/MIT astronautics Lyapunov ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$polynomialReduce$2(RingsAlgebraTool.scala:171)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:171)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absPolynomialReduce$1(ODEInvariance.scala:976)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$rank$17(ODEInvariance.scala:992)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:992)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/MIT astronautics Lyapunov#Benchmarks/Nonlinear/MIT astronautics Lyapunov (failed)
FAILED Benchmarks/Nonlinear/MIT astronautics Lyapunov: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57#Benchmarks/Nonlinear/Man Maccallum Goriely Page 57 (failed)
FAILED Benchmarks/Nonlinear/Man Maccallum Goriely Page 57: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit Example 3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit Example 3#Benchmarks/Nonlinear/Nonlinear Circuit Example 3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit Example 3#Benchmarks/Nonlinear/Nonlinear Circuit Example 3 (failed)
FAILED Benchmarks/Nonlinear/Nonlinear Circuit Example 3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit Example 4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Nonlinear Circuit Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Nonlinear Circuit Example 4 (failed)
FAILED Benchmarks/Nonlinear/Nonlinear Circuit Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator#Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator (failed)
FAILED Benchmarks/Nonlinear/Nonlinear Circuit RLC Circuit Oscillator: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant)#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant)#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant) (failed)
FAILED Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (Variant): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Stable Limit Cycle 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Stable Limit Cycle 2#Benchmarks/Nonlinear/Stable Limit Cycle 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Stable Limit Cycle 2#Benchmarks/Nonlinear/Stable Limit Cycle 2 (failed)
FAILED Benchmarks/Nonlinear/Stable Limit Cycle 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Example 6_3_2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Example 6_3_2#Benchmarks/Nonlinear/Strogatz Example 6_3_2 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Example 6_3_2#Benchmarks/Nonlinear/Strogatz Example 6_3_2 (proved)
PROVED Benchmarks/Nonlinear/Strogatz Example 6_3_2: tactic=user,tacticsize=1,budget=60[s],duration=8541[ms],qe=4453[ms],rcf=0,steps=430
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Example 6_8_3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Example 6_8_3#Benchmarks/Nonlinear/Strogatz Example 6_8_3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Example 6_8_3#Benchmarks/Nonlinear/Strogatz Example 6_8_3 (failed)
FAILED Benchmarks/Nonlinear/Strogatz Example 6_8_3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5#Benchmarks/Nonlinear/Strogatz Exercise 6_1_5 (failed)
FAILED Benchmarks/Nonlinear/Strogatz Exercise 6_1_5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole#Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole (failed)
FAILED Benchmarks/Nonlinear/Strogatz Exercise 6_1_9 Dipole: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System (failed)
FAILED Benchmarks/Nonlinear/Strogatz Exercise 6_6_1 Reversible System: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle#Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle (failed)
FAILED Benchmarks/Nonlinear/Strogatz Exercise 6_6_2 Limit Cycle: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5#Benchmarks/Nonlinear/Strogatz Exercise 7_3_5 (failed)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
FAILED Benchmarks/Nonlinear/Strogatz Exercise 7_3_5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Unstable Unit Circle 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Unstable Unit Circle 2#Benchmarks/Nonlinear/Unstable Unit Circle 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Unstable Unit Circle 2#Benchmarks/Nonlinear/Unstable Unit Circle 2 (failed)
FAILED Benchmarks/Nonlinear/Unstable Unit Circle 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wien bridge oscillator
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wien bridge oscillator#Benchmarks/Nonlinear/Wien bridge oscillator ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wien bridge oscillator#Benchmarks/Nonlinear/Wien bridge oscillator (failed)
FAILED Benchmarks/Nonlinear/Wien bridge oscillator: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wiggins Example 17_1_2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wiggins Example 17_1_2#Benchmarks/Nonlinear/Wiggins Example 17_1_2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wiggins Example 17_1_2#Benchmarks/Nonlinear/Wiggins Example 17_1_2 (failed)
FAILED Benchmarks/Nonlinear/Wiggins Example 17_1_2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n#Benchmarks/Nonlinear/Wiggins Example 18_7_3_n (timeout)
TIMEOUT Benchmarks/Nonlinear/Wiggins Example 18_7_3_n: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C1#Benchmarks/Nonlinear/ZYLZCL Example C1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C1#Benchmarks/Nonlinear/ZYLZCL Example C1 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C3#Benchmarks/Nonlinear/ZYLZCL Example C3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C3#Benchmarks/Nonlinear/ZYLZCL Example C3 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C4#Benchmarks/Nonlinear/ZYLZCL Example C4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C4#Benchmarks/Nonlinear/ZYLZCL Example C4 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C6
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C6#Benchmarks/Nonlinear/ZYLZCL Example C6 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C6#Benchmarks/Nonlinear/ZYLZCL Example C6 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C6: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C7
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C7#Benchmarks/Nonlinear/ZYLZCL Example C7 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C7#Benchmarks/Nonlinear/ZYLZCL Example C7 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C8
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C8#Benchmarks/Nonlinear/ZYLZCL Example C8 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C8#Benchmarks/Nonlinear/ZYLZCL Example C8 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C8: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator) (timeout)
TIMEOUT Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 2 (Chemical Oscillator): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31#Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31 (failed)
FAILED Benchmarks/Nonlinear/Prajna PhD Thesis 2-4-1 Page 31: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 1 (Variant): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 2 (Variant): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3 (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4 (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 1): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2)#Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2) (failed)
FAILED Benchmarks/Nonlinear/Ferragut Giacomini 2010: Example 5 (Variant 2): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric) (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C1 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric) (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C2 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3 (failed)
FAILED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5 (failed)
FAILED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (I)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (I)#Benchmarks/Nonlinear/3D Lotka Volterra (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (I)#Benchmarks/Nonlinear/3D Lotka Volterra (I) (failed)
FAILED Benchmarks/Nonlinear/3D Lotka Volterra (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (II)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (II)#Benchmarks/Nonlinear/3D Lotka Volterra (II) ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (II)#Benchmarks/Nonlinear/3D Lotka Volterra (II) (failed)
FAILED Benchmarks/Nonlinear/3D Lotka Volterra (II): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (III)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (III)#Benchmarks/Nonlinear/3D Lotka Volterra (III) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/3D Lotka Volterra (III)#Benchmarks/Nonlinear/3D Lotka Volterra (III) (failed)
FAILED Benchmarks/Nonlinear/3D Lotka Volterra (III): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143#Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143 (failed)
FAILED Benchmarks/Nonlinear/Alongi Nelson Ex_4_1_9 page 143: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth)#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth)#Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth) (failed)
FAILED Benchmarks/Nonlinear/Constraint-based Example 8 (Phytoplankton Growth): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant 3-dim sphere
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant 3-dim sphere#Benchmarks/Nonlinear/Invariant 3-dim sphere ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant 3-dim sphere#Benchmarks/Nonlinear/Invariant 3-dim sphere (failed)
FAILED Benchmarks/Nonlinear/Invariant 3-dim sphere: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 4#Benchmarks/Nonlinear/Invariant Clusters Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 4#Benchmarks/Nonlinear/Invariant Clusters Example 4 (failed)
FAILED Benchmarks/Nonlinear/Invariant Clusters Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 5#Benchmarks/Nonlinear/Invariant Clusters Example 5 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Invariant Clusters Example 5#Benchmarks/Nonlinear/Invariant Clusters Example 5 (failed)
FAILED Benchmarks/Nonlinear/Invariant Clusters Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Looping Particle
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Looping Particle#Benchmarks/Nonlinear/Looping Particle ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Looping Particle#Benchmarks/Nonlinear/Looping Particle (failed)
FAILED Benchmarks/Nonlinear/Looping Particle: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Shimizu Morioka System
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Shimizu Morioka System#Benchmarks/Nonlinear/Shimizu Morioka System ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Shimizu Morioka System#Benchmarks/Nonlinear/Shimizu Morioka System (timeout)
TIMEOUT Benchmarks/Nonlinear/Shimizu Morioka System: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C2#Benchmarks/Nonlinear/ZYLZCL Example C2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C2#Benchmarks/Nonlinear/ZYLZCL Example C2 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C3 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric) (failed)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C4 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2 (proved)
PROVED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.2: tactic=user,tacticsize=1,budget=60[s],duration=1135[ms],qe=379[ms],rcf=0,steps=559
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.5 Variant 3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7 (failed)
FAILED Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (Parametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1) (failed)
FAILED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=2s Variant s=1 r=1): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33) (timeout)
TIMEOUT Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1) ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:203)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:192)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:192)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:192)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree3$1(ODEInvariance.scala:478)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAIclosed$1(ODEInvariance.scala:478)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1) (failed)
FAILED Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=0 s=0.33 Variant r=1): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0) (timeout)
TIMEOUT Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1)#Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1) (timeout)
TIMEOUT Benchmarks/Nonlinear/Llibre Zhang 2002: Lorenz System (p. 1623 b=1 r=0 Variant s=1): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Coupled Spring-Mass System (I)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Coupled Spring-Mass System (I)#Benchmarks/Nonlinear/Coupled Spring-Mass System (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Coupled Spring-Mass System (I)#Benchmarks/Nonlinear/Coupled Spring-Mass System (I) (failed)
FAILED Benchmarks/Nonlinear/Coupled Spring-Mass System (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Coupled Spring-Mass System (II)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Coupled Spring-Mass System (II)#Benchmarks/Nonlinear/Coupled Spring-Mass System (II) ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Coupled Spring-Mass System (II)#Benchmarks/Nonlinear/Coupled Spring-Mass System (II) (failed)
FAILED Benchmarks/Nonlinear/Coupled Spring-Mass System (II): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Damped Mathieu System
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Damped Mathieu System#Benchmarks/Nonlinear/Damped Mathieu System ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Damped Mathieu System#Benchmarks/Nonlinear/Damped Mathieu System (failed)
FAILED Benchmarks/Nonlinear/Damped Mathieu System: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Flight Maneuvers (I)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Flight Maneuvers (I)#Benchmarks/Nonlinear/Flight Maneuvers (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Flight Maneuvers (I)#Benchmarks/Nonlinear/Flight Maneuvers (I) (failed)
FAILED Benchmarks/Nonlinear/Flight Maneuvers (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2 (failed)
FAILED Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.3 Variant 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric) (failed)
FAILED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C5 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6: tactic=user,tacticsize=1,budget=60[s],duration=3153[ms],qe=2031[ms],rcf=0,steps=2781
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric) (proved)
PROVED Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C6 (Nonparametric): tactic=user,tacticsize=1,budget=60[s],duration=2549[ms],qe=1407[ms],rcf=0,steps=1773
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum)#Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum) (failed)
FAILED Benchmarks/Nonlinear/Papachristodoulou Prajna 2002: Example 3 (Whirling Pendulum): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust) (failed)
FAILED Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent low thrust): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust)#Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust) (failed)
FAILED Benchmarks/Nonlinear/Lunar lander descent guidance (slow descent high thrust): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13 (timeout)
TIMEOUT Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.13: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Space Craft: Collision Avoidance
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Space Craft: Collision Avoidance#Benchmarks/Nonlinear/Space Craft: Collision Avoidance ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:171)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absPolynomialReduce$1(ODEInvariance.scala:976)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$rank$17(ODEInvariance.scala:992)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:992)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:191)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Space Craft: Collision Avoidance#Benchmarks/Nonlinear/Space Craft: Collision Avoidance (failed)
FAILED Benchmarks/Nonlinear/Space Craft: Collision Avoidance: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric)#Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric) (timeout)
TIMEOUT Benchmarks/Nonlinear/Yang Wu Lin 2020: Benchmark C7 (Nonparametric): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6#Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6 (timeout)
TIMEOUT Benchmarks/Nonlinear/Gorbuzov Pranevich 2012: Example 1.6: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8#Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8 (timeout)
TIMEOUT Benchmarks/Nonlinear/Djaballah Chapoutot Kieffer Bouissou 2017: Example 8: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C9
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C9#Benchmarks/Nonlinear/ZYLZCL Example C9 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:191)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C9#Benchmarks/Nonlinear/ZYLZCL Example C9 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C9: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (I) (failed)
FAILED Benchmarks/Nonlinear/Collision Avoidance Maneuver (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE) (proved)
PROVED Benchmarks/Nonlinear/ATC: 2 Aircraft Tangential Roundabout Maneuver (ODE): tactic=user,tacticsize=1,budget=60[s],duration=13744[ms],qe=3102[ms],rcf=0,steps=3130
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (II) (failed)
FAILED Benchmarks/Nonlinear/Collision Avoidance Maneuver (II): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III) ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:104)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$polynomialReduce$2(RingsAlgebraTool.scala:171)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.polynomialReduce(RingsAlgebraTool.scala:171)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.polynomialReduce(RingsAlgebraTool.scala:379)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absPolynomialReduce$1(ODEInvariance.scala:976)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$rank$21(ODEInvariance.scala:996)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:996)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:196)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 193 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III)#Benchmarks/Nonlinear/Collision Avoidance Maneuver (III) (failed)
FAILED Benchmarks/Nonlinear/Collision Avoidance Maneuver (III): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Laub-Loomis
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Laub-Loomis#Benchmarks/Nonlinear/Laub-Loomis ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Laub-Loomis#Benchmarks/Nonlinear/Laub-Loomis (timeout)
TIMEOUT Benchmarks/Nonlinear/Laub-Loomis: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Planar 2-body problem
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Planar 2-body problem#Benchmarks/Nonlinear/Planar 2-body problem ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Planar 2-body problem#Benchmarks/Nonlinear/Planar 2-body problem (failed)
FAILED Benchmarks/Nonlinear/Planar 2-body problem: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C10
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C10#Benchmarks/Nonlinear/ZYLZCL Example C10 ...
BigInteger out of long range

in _(1)
in <( _(1) )
	(Failed on branch _)
in <( _(1) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.ArithmeticException: BigInteger out of long range
	at cc.redberry.rings.bigint.BigInteger.longValueExact(BigInteger.java:5917)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:103)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$fromRing$4(RingsAlgebraTool.scala:125)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.fromRing(RingsAlgebraTool.scala:125)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.$anonfun$groebnerBasis$2(RingsAlgebraTool.scala:164)
	at scala.collection.immutable.List.map(List.scala:251)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsLibrary.groebnerBasis(RingsAlgebraTool.scala:164)
	at edu.cmu.cs.ls.keymaerax.tools.ext.RingsAlgebraTool.groebnerBasis(RingsAlgebraTool.scala:374)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.absGroebnerBasis$1(ODEInvariance.scala:962)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.rank(ODEInvariance.scala:999)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.pStarGeq(ODEInvariance.scala:152)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:199)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.fStar(ODEInvariance.scala:191)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.liftedTree20$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.ODEInvariance$.$anonfun$sAI$1(ODEInvariance.scala:2354)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$30$$anon$31.computeExpr(MiscTactics.scala:675)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:852)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SingleGoalDependentTactic.computeExpr(BellerophonSyntax.scala:863)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedDependentPositionTactic.computeExpr(BellerophonSyntax.scala:979)
	at edu.cmu.cs.ls.keymaerax.bellerophon.DependentTactic.computeExpr(BellerophonSyntax.scala:846)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:384)
	... 189 more
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ZYLZCL Example C10#Benchmarks/Nonlinear/ZYLZCL Example C10 (failed)
FAILED Benchmarks/Nonlinear/ZYLZCL Example C10: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE) (timeout)
TIMEOUT Benchmarks/Nonlinear/ATC: 3 Aircraft Tangential Roundabout Maneuver (ODE): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE) ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE)#Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE) (timeout)
TIMEOUT Benchmarks/Nonlinear/ATC: 4 Aircraft Tangential Roundabout Maneuver (ODE): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9 (failed)
FAILED Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and Dumortier Llibre Artes Ex. 10_9: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3#Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3 (failed)
FAILED Benchmarks/Nonlinear/Product of Ben Sassi Girard Sankaranarayanan 2014 Fitzhugh-Nagumo and Strogatz Example 6_8_3: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2 (failed)
FAILED Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Fitzhugh Nagumo Ben Sassi Girard 2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System#Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System (failed)
FAILED Benchmarks/Nonlinear/Product of Dai Gan Xia Zhan JSC14 Ex. 2 and Strogatz Exercise 6_6_1 Reversible System: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4 ...
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4#Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4 (timeout)
TIMEOUT Benchmarks/Nonlinear/Product of Dumortier Llibre Artes Ex. 1_11a and ZYLZCL Example C4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7 (failed)
FAILED Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_1 page 99 and ZYLZCL Example C7: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4#Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4 (failed)
FAILED Benchmarks/Nonlinear/Product of Hamiltonian System 1 and Nonlinear Circuit Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1#Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1 (failed)
FAILED Benchmarks/Nonlinear/Product of Man Maccallum Goriely Page 57 and ZYLZCL Example C1: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I)#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I) ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I)#Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I) (failed)
FAILED Benchmarks/Nonlinear/Product of Arrowsmith Place Fig_3_5e page 79 and 3D Lotka Volterra (I): tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5#Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5 (failed)
FAILED Benchmarks/Nonlinear/Product of Darboux Christoffel Int Goriely page 58 and Invariant Clusters Example 5: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4 (failed)
FAILED Benchmarks/Nonlinear/Product of Djaballah Chapoutot Kieffer Bouissou 2015 Ex. 1 and Invariant Clusters Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2#Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2 (failed)
FAILED Benchmarks/Nonlinear/Product of Forsman Phd Ex 6_14 page 119 and ZYLZCL Example C2: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere#Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere (failed)
FAILED Benchmarks/Nonlinear/Product of Locally stable nonlinear system and Invariant 3-dim sphere: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4 ...
Automation failed to prove goal: expected to have proved, but got open goals

in 
in >>_<<
	at edu.cmu.cs.ls.keymaerax.btactics.DebuggingTactics$$anon$13.result(MiscTactics.scala:320)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory.$anonfun$forward$1(MiscTactics.scala:604)
	at edu.cmu.cs.ls.keymaerax.btactics.TacticFactory$TacticForNameFactory$$anon$45.result(MiscTactics.scala:750)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BuiltInTactic.execute(BellerophonSyntax.scala:605)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:253)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Done /ismail/kyx5/nonlinear.kyx.stripped#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4#Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4 (failed)
FAILED Benchmarks/Nonlinear/Product of Invariant 3-dim sphere and Invariant Clusters Example 4: tactic=user,tacticsize=-1,budget=60[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Essentials
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Essentials#Benchmarks/Advanced/ETCS: Essentials ...
Done /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Essentials#Benchmarks/Advanced/ETCS: Essentials (proved)
PROVED Benchmarks/Advanced/ETCS: Essentials: tactic=user,tacticsize=1,budget=300[s],duration=2273[ms],qe=840[ms],rcf=0,steps=3533
kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability)#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability) ...
Done /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability)#Benchmarks/Advanced/ETCS: Proposition 1 (Controllability) (proved)
PROVED Benchmarks/Advanced/ETCS: Proposition 1 (Controllability): tactic=user,tacticsize=1,budget=300[s],duration=7030[ms],qe=2911[ms],rcf=0,steps=3679
kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity)#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity) ...
Done /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity)#Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity) (timeout)
TIMEOUT Benchmarks/Advanced/ETCS: Proposition 4 (Reactivity): tactic=user,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver (proved)
PROVED Benchmarks/Advanced/ATC: 2 Aircraft Tangential Roundabout Maneuver: tactic=user,tacticsize=1,budget=300[s],duration=14255[ms],qe=3137[ms],rcf=0,steps=3671
kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver (timeout)
TIMEOUT Benchmarks/Advanced/ATC: 3 Aircraft Tangential Roundabout Maneuver: tactic=user,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver ...
Done /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver#Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver (timeout)
TIMEOUT Benchmarks/Advanced/ATC: 4 Aircraft Tangential Roundabout Maneuver: tactic=user,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/advanced.kyx.stripped#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety ...
Core requirement failed: Substitutable expression expected: (abs<< ._1 < 0&._0=-._1|._1>=0&._0=._1 >>(._0)~>1)

in _
in <( _, (cohideOnlyL('Llast);_) )
	(Failed on branch (_(1.1);_))
in <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) )
	(Failed on branch (implyR(1);MR("(x-xo)^2+(y-yo)^2>0&false&false", 1);<( (_(1.1);_), (cohideOnlyL('Llast);_) )))
in <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) )
	(Failed on branch _)
in <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) )
	(Failed on branch _)
in <( <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) ), <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (...
in <( <( <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) ), <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) ), <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) ) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:251)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:947)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: Core requirement failed: Substitutable expression expected: (abs<< ._1 < 0&._0=-._1|._1>=0&._0=._1 >>(._0)~>1)
in (abs<< ._1 < 0&._0=-._1|._1>=0&._0=._1 >>(._0)~>1)
in FastUSubstAboveURen{(abs<< ._1 < 0&._0=-._1|._1>=0&._0=._1 >>(._0),1)}
	at edu.cmu.cs.ls.keymaerax.core.package$.insist(package.scala:266)
	at edu.cmu.cs.ls.keymaerax.core.SubstitutionPair.<init>(UniformSubstitution.scala:106)
	at edu.cmu.cs.ls.keymaerax.infrastruct.FastUSubstAboveURen.$anonfun$subsDefs$2(RenUSubst.scala:280)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.infrastruct.FastUSubstAboveURen.liftedTree1$1(RenUSubst.scala:279)
	at edu.cmu.cs.ls.keymaerax.infrastruct.FastUSubstAboveURen.<init>(RenUSubst.scala:276)
	at edu.cmu.cs.ls.keymaerax.infrastruct.RenUSubst$.apply(RenUSubst.scala:27)
	at edu.cmu.cs.ls.keymaerax.infrastruct.FreshUnificationMatch.Subst(UnificationMatchImpl.scala:252)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicComposedUnificationMatch.unifies2(UnificationMatchImpl.scala:79)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:513)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:473)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicComposedUnificationMatch.unifies2(UnificationMatchImpl.scala:78)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:513)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:473)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicComposedUnificationMatch.unifies2(UnificationMatchImpl.scala:73)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:550)
	at edu.cmu.cs.ls.keymaerax.infrastruct.BaseMatcher.unifyExpr(UnificationMatch.scala:188)
	at edu.cmu.cs.ls.keymaerax.infrastruct.BaseMatcher.unifiable(UnificationMatch.scala:268)
	at edu.cmu.cs.ls.keymaerax.infrastruct.BaseMatcher.unifiable$(UnificationMatch.scala:267)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unifiable(UnificationMatch.scala:423)
	at edu.cmu.cs.ls.keymaerax.btactics.UnifyUSCalculus$$anon$2.checkSubst(UnifyUSCalculus.scala:789)
	at edu.cmu.cs.ls.keymaerax.btactics.UnifyUSCalculus$$anon$2.computeResult(UnifyUSCalculus.scala:813)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedPositionTactic.computeResult(BellerophonSyntax.scala:718)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:363)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	... 383 more
Done /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety (failed)
FAILED Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Static safety: tactic=user,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/advanced.kyx.stripped#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Proving entries from 1 files
Proving /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety ...
Core requirement failed: Substitutable expression expected: (abs<< ._1 < 0&._0=-._1|._1>=0&._0=._1 >>(._0)~>1)

in _
in <( _, (cohideOnlyL('Llast);_) )
	(Failed on branch (_(1.1);_))
in <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) )
	(Failed on branch (implyR(1);MR("(0-v>0|(x-xo)^2+(y-yo)^2>0)&false&(x-xo)^2+(y-yo)^2>0&false", 1);<( (_(1.1);_), (cohideOnlyL('Llast);_) )))
in <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) )
	(Failed on branch _)
in <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) )
	(Failed on branch _)
in <( <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) ), <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohi...
in <( <( <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) ), <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) ), <( <( <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ), <( (skip;label("Show")), <( _, (cohideOnlyL('Llast);_) ) ) ) ) ) )
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:390)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:405)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:251)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:947)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5(SequentialInterpreter.scala:281)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$5$adapted(SequentialInterpreter.scala:279)
	at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:619)
	at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:617)
	at scala.collection.AbstractIterable.foreach(Iterable.scala:935)
	at scala.collection.IterableOps$WithFilter.foreach(Iterable.scala:905)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:279)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:292)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$6(SequentialInterpreter.scala:302)
	at scala.util.control.Breaks.breakable(Breaks.scala:77)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:299)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:442)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:459)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleInterpreter$.apply(BelleInterpreter.scala:36)
	at edu.cmu.cs.ls.keymaerax.btactics.TactixLibrary$.proveBy(TactixLibrary.scala:1560)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker.$anonfun$apply$2(KeYmaeraXProofChecker.scala:484)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:687)
	at scala.concurrent.impl.Promise$Transformation.run(Promise.scala:467)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1423)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: Core requirement failed: Substitutable expression expected: (abs<< ._1 < 0&._0=-._1|._1>=0&._0=._1 >>(._0)~>1)
in (abs<< ._1 < 0&._0=-._1|._1>=0&._0=._1 >>(._0)~>1)
in FastUSubstAboveURen{(abs<< ._1 < 0&._0=-._1|._1>=0&._0=._1 >>(._0),1)}
	at edu.cmu.cs.ls.keymaerax.core.package$.insist(package.scala:266)
	at edu.cmu.cs.ls.keymaerax.core.SubstitutionPair.<init>(UniformSubstitution.scala:106)
	at edu.cmu.cs.ls.keymaerax.infrastruct.FastUSubstAboveURen.$anonfun$subsDefs$2(RenUSubst.scala:280)
	at scala.collection.immutable.List.map(List.scala:247)
	at scala.collection.immutable.List.map(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.infrastruct.FastUSubstAboveURen.liftedTree1$1(RenUSubst.scala:279)
	at edu.cmu.cs.ls.keymaerax.infrastruct.FastUSubstAboveURen.<init>(RenUSubst.scala:276)
	at edu.cmu.cs.ls.keymaerax.infrastruct.RenUSubst$.apply(RenUSubst.scala:27)
	at edu.cmu.cs.ls.keymaerax.infrastruct.FreshUnificationMatch.Subst(UnificationMatchImpl.scala:252)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicComposedUnificationMatch.unifies2(UnificationMatchImpl.scala:79)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:513)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:473)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicComposedUnificationMatch.unifies2(UnificationMatchImpl.scala:78)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:513)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:473)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicComposedUnificationMatch.unifies2(UnificationMatchImpl.scala:73)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unify(UnificationMatch.scala:550)
	at edu.cmu.cs.ls.keymaerax.infrastruct.BaseMatcher.unifyExpr(UnificationMatch.scala:188)
	at edu.cmu.cs.ls.keymaerax.infrastruct.BaseMatcher.unifiable(UnificationMatch.scala:268)
	at edu.cmu.cs.ls.keymaerax.infrastruct.BaseMatcher.unifiable$(UnificationMatch.scala:267)
	at edu.cmu.cs.ls.keymaerax.infrastruct.SchematicUnificationMatch.unifiable(UnificationMatch.scala:423)
	at edu.cmu.cs.ls.keymaerax.btactics.UnifyUSCalculus$$anon$2.checkSubst(UnifyUSCalculus.scala:789)
	at edu.cmu.cs.ls.keymaerax.btactics.UnifyUSCalculus$$anon$2.computeResult(UnifyUSCalculus.scala:813)
	at edu.cmu.cs.ls.keymaerax.bellerophon.AppliedPositionTactic.computeResult(BellerophonSyntax.scala:718)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:363)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.$anonfun$runExpr$3(SequentialInterpreter.scala:268)
	at scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:183)
	at scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:179)
	at scala.collection.immutable.List.foldLeft(List.scala:79)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:267)
	at edu.cmu.cs.ls.keymaerax.bellerophon.SequentialInterpreter.runExpr(SequentialInterpreter.scala:967)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1059)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.$anonfun$runExpr$132(SequentialInterpreter.scala:1039)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:75)
	at scala.collection.immutable.ArraySeq.map(ArraySeq.scala:35)
	at edu.cmu.cs.ls.keymaerax.bellerophon.LazySequentialInterpreter.runExpr(SequentialInterpreter.scala:1037)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.apply(SequentialInterpreter.scala:62)
	at edu.cmu.cs.ls.keymaerax.bellerophon.BelleBaseInterpreter.runExpr(SequentialInterpreter.scala:385)
	... 383 more
Done /ismail/kyx5/advanced.kyx.stripped#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety#Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety (failed)
FAILED Benchmarks/Advanced/Robot collision avoidance in two-dimensional space: Passive safety: tactic=user,tacticsize=-1,budget=300[s],duration=-1[ms],qe=-1[ms],rcf=-1,steps=-1
kyx5/nonlinear2.kyx.stripped#Benchmarks/Nonlinear/Robertson Chemical Reaction
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Exception in thread "main" java.io.FileNotFoundException: /ismail/kyx5/nonlinear2.kyx.stripped (No such file or directory)
	at java.base/java.io.FileInputStream.open0(Native Method)
	at java.base/java.io.FileInputStream.open(FileInputStream.java:213)
	at java.base/java.io.FileInputStream.<init>(FileInputStream.java:152)
	at scala.io.Source$.fromFile(Source.scala:94)
	at scala.io.Source$.fromFile(Source.scala:79)
	at scala.io.Source$.fromFile(Source.scala:57)
	at scala.io.Source$.fromFile(Source.scala:63)
	at edu.cmu.cs.ls.keymaerax.parser.ArchiveParser.parseFromFile(ArchiveParser.scala:562)
	at edu.cmu.cs.ls.keymaerax.parser.ArchiveParser.parseFromFile$(ArchiveParser.scala:555)
	at edu.cmu.cs.ls.keymaerax.parser.DLArchiveParser.parseFromFile(DLArchiveParser.scala:49)
	at edu.cmu.cs.ls.keymaerax.parser.ArchiveParser$.parseFromFile(ArchiveParser.scala:625)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker$.$anonfun$prove$16(KeYmaeraXProofChecker.scala:243)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker$.prove(KeYmaeraXProofChecker.scala:243)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraX$.runCommand(KeYmaeraX.scala:98)
	at edu.cmu.cs.ls.keymaerax.launcher.KeYmaeraX$.main(KeYmaeraX.scala:147)
	at edu.cmu.cs.ls.keymaerax.launcher.Main$.main(Main.scala:106)
	at edu.cmu.cs.ls.keymaerax.launcher.Main.main(Main.scala)
kyx5/nonlinear2.kyx.stripped#Benchmarks/Nonlinear/Lotka-Volterra with tangential crossing (Invariance)
KeYmaera X Prover 5.1.1
Use option -help for usage and license information
WARNING: Encountered 19 errors when trying to populate DerivedAxioms database. Unable to derive:
timesDivInverse
powNegOne
powerLemma
timesPowersBoth
powerEven
powerOdd
divideNumber
divideRat
divideNeg
normalizeCoeff0
powerDivideEven
powerDivideOdd
ratFormAdd
ratFormMinus
ratFormDivide
ratFormTimes
ratFormNeg
taylorModelPowerEven
taylorModelPowerOdd

Timed out while trying to derive lemmas. Continuing with restricted functionality!
DETAILS: QE with Z3 gives SAT. Cannot reduce the following formula to True:
\forall y \forall x 1/x*y=y/x

Run with -debug for more details.
Exception in thread "main" java.io.FileNotFoundException: /ismail/kyx5/nonlinear2.kyx.stripped (No such file or directory)
	at java.base/java.io.FileInputStream.open0(Native Method)
	at java.base/java.io.FileInputStream.open(FileInputStream.java:213)
	at java.base/java.io.FileInputStream.<init>(FileInputStream.java:152)
	at scala.io.Source$.fromFile(Source.scala:94)
	at scala.io.Source$.fromFile(Source.scala:79)
	at scala.io.Source$.fromFile(Source.scala:57)
	at scala.io.Source$.fromFile(Source.scala:63)
	at edu.cmu.cs.ls.keymaerax.parser.ArchiveParser.parseFromFile(ArchiveParser.scala:562)
	at edu.cmu.cs.ls.keymaerax.parser.ArchiveParser.parseFromFile$(ArchiveParser.scala:555)
	at edu.cmu.cs.ls.keymaerax.parser.DLArchiveParser.parseFromFile(DLArchiveParser.scala:49)
	at edu.cmu.cs.ls.keymaerax.parser.ArchiveParser$.parseFromFile(ArchiveParser.scala:625)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker$.$anonfun$prove$16(KeYmaeraXProofChecker.scala:243)
	at scala.collection.immutable.List.map(List.scala:247)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraXProofChecker$.prove(KeYmaeraXProofChecker.scala:243)
	at edu.cmu.cs.ls.keymaerax.cli.KeYmaeraX$.runCommand(KeYmaeraX.scala:98)
	at edu.cmu.cs.ls.keymaerax.launcher.KeYmaeraX$.main(KeYmaeraX.scala:147)
	at edu.cmu.cs.ls.keymaerax.launcher.Main$.main(Main.scala:106)
	at edu.cmu.cs.ls.keymaerax.launcher.Main.main(Main.scala)
Done running examples
kyx
